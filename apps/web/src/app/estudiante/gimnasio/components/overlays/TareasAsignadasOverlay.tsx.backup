'use client';

import { motion } from 'framer-motion';
import { ArrowLeft, Lock, Calendar, Clock, Sparkles, CheckCircle2, AlertCircle } from 'lucide-react';
import { useOverlayStack } from '../../contexts/OverlayStackProvider';
import { useState, useEffect } from 'react';
import { getPlanificaciones } from '@/lib/api/planificaciones.api';

interface TareaCard {
  id: string;
  titulo: string;
  descripcion: string;
  semana: number;
  estado: 'bloqueada' | 'disponible' | 'en_progreso' | 'completada';
  fecha_disponible?: string;
  tema: 'quimica' | 'astronomia' | 'fisica' | 'informatica' | 'general';
  total_actividades: number;
  actividades_completadas: number;
}

export function TareasAsignadasOverlay() {
  const { pop } = useOverlayStack();
  const [tareas, setTareas] = useState<TareaCard[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const cargarTareas = async () => {
      try {
        setLoading(true);

        // Cargar planificaciones del mes actual
        const hoy = new Date();
        await getPlanificaciones(
          {
            mes: hoy.getMonth() + 1,
            anio: hoy.getFullYear(),
            estado: 'PUBLICADA'
          },
          { page: 1, limit: 20 }
        );

        // Simular datos de tareas para demo
        // En producci√≥n, esto vendr√≠a del endpoint de asignaciones del estudiante
        const tareasSimuladas: TareaCard[] = [
          {
            id: '1',
            titulo: 'MES DE LA CIENCIA - QU√çMICA',
            descripcion: 'Experimentos y reacciones qu√≠micas b√°sicas',
            semana: 1,
            estado: 'disponible',
            tema: 'quimica',
            total_actividades: 8,
            actividades_completadas: 0,
          },
          {
            id: '2',
            titulo: 'MES DE LA CIENCIA - ASTRONOM√çA',
            descripcion: 'Sistema solar y constelaciones',
            semana: 2,
            estado: 'bloqueada',
            fecha_disponible: '2025-11-08',
            tema: 'astronomia',
            total_actividades: 10,
            actividades_completadas: 0,
          },
          {
            id: '3',
            titulo: 'MES DE LA CIENCIA - F√çSICA',
            descripcion: 'Leyes de Newton y movimiento',
            semana: 3,
            estado: 'bloqueada',
            fecha_disponible: '2025-11-15',
            tema: 'fisica',
            total_actividades: 12,
            actividades_completadas: 0,
          },
          {
            id: '4',
            titulo: 'MES DE LA CIENCIA - INFORM√ÅTICA',
            descripcion: 'Programaci√≥n b√°sica y algoritmos',
            semana: 4,
            estado: 'bloqueada',
            fecha_disponible: '2025-11-22',
            tema: 'informatica',
            total_actividades: 15,
            actividades_completadas: 0,
          },
        ];

        setTareas(tareasSimuladas);
      } catch (error) {
        console.error('Error al cargar tareas:', error);
      } finally {
        setLoading(false);
      }
    };

    cargarTareas();
  }, []);

  // Configuraci√≥n de colores por tema
  const temaConfig = {
    quimica: {
      gradient: 'from-green-500 to-emerald-600',
      glow: 'rgba(16, 185, 129, 0.4)',
      emoji: 'üß™',
      border: 'border-green-500/40',
    },
    astronomia: {
      gradient: 'from-purple-500 to-violet-600',
      glow: 'rgba(168, 85, 247, 0.4)',
      emoji: 'üåå',
      border: 'border-purple-500/40',
    },
    fisica: {
      gradient: 'from-orange-500 to-red-600',
      glow: 'rgba(249, 115, 22, 0.4)',
      emoji: '‚ö°',
      border: 'border-orange-500/40',
    },
    informatica: {
      gradient: 'from-cyan-500 to-blue-600',
      glow: 'rgba(6, 182, 212, 0.4)',
      emoji: 'üíª',
      border: 'border-cyan-500/40',
    },
    general: {
      gradient: 'from-slate-500 to-gray-600',
      glow: 'rgba(100, 116, 139, 0.4)',
      emoji: 'üìö',
      border: 'border-slate-500/40',
    },
  };

  return (
    <div className="absolute inset-0 flex items-center justify-center z-50">
      {/* Backdrop */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="absolute inset-0 bg-black/80 backdrop-blur-sm"
        onClick={pop}
      />

      {/* Panel principal */}
      <motion.div
        initial={{ opacity: 0, scale: 0.9, y: 20 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        exit={{ opacity: 0, scale: 0.9, y: 20 }}
        transition={{ type: 'spring', damping: 25, stiffness: 300 }}
        className="relative w-full max-w-5xl h-[90vh] sm:h-[85vh] mx-3 sm:mx-4 bg-gradient-to-br from-slate-900/95 via-purple-900/95 to-slate-900/95
                   backdrop-blur-2xl rounded-2xl sm:rounded-3xl border-2 border-white/20 shadow-2xl
                   flex flex-col overflow-hidden"
      >
        {/* Header */}
        <div className="flex-shrink-0 flex items-center justify-between p-4 sm:p-6 border-b border-white/10">
          <div className="flex items-center gap-3 sm:gap-4">
            <button
              onClick={pop}
              className="w-10 sm:w-12 h-10 sm:h-12 rounded-lg sm:rounded-xl bg-white/10 hover:bg-white/20
                       flex items-center justify-center transition-colors
                       border border-white/20"
            >
              <ArrowLeft className="w-5 sm:w-6 h-5 sm:h-6 text-white" />
            </button>
            <div>
              <h1 className="text-2xl sm:text-4xl font-black text-white font-[family-name:var(--font-lilita)]">
                TAREAS ASIGNADAS
              </h1>
              <p className="text-cyan-300 text-xs sm:text-sm font-bold mt-1">
                {tareas.filter(t => t.estado === 'disponible').length} disponibles ‚Ä¢ {tareas.filter(t => t.estado === 'bloqueada').length} bloqueadas
              </p>
            </div>
          </div>
          <div className="px-3 sm:px-4 py-1.5 sm:py-2 bg-purple-500/20 border border-purple-500/40 rounded-lg sm:rounded-xl">
            <span className="text-purple-300 text-xs sm:text-sm font-bold">Noviembre 2025</span>
          </div>
        </div>

        {/* Contenido con scroll */}
        <div className="flex-1 overflow-y-auto p-4 sm:p-6">
          {loading ? (
            <div className="flex items-center justify-center h-full">
              <div className="text-white/60 text-xl font-bold">Cargando tareas...</div>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4">
              {tareas.map((tarea, index) => {
                const config = temaConfig[tarea.tema];
                const esBloqueada = tarea.estado === 'bloqueada';
                const esDisponible = tarea.estado === 'disponible';
                const progreso = Math.round((tarea.actividades_completadas / tarea.total_actividades) * 100);

                return (
                  <motion.div
                    key={tarea.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className={`
                      relative rounded-xl sm:rounded-2xl p-4 sm:p-6 border-2
                      ${esBloqueada
                        ? 'bg-slate-800/40 border-slate-700/40 cursor-not-allowed'
                        : `bg-gradient-to-br ${config.gradient} ${config.border} cursor-pointer hover:scale-[1.02]`
                      }
                      transition-all duration-200
                    `}
                    style={!esBloqueada ? {
                      boxShadow: `0 0 30px ${config.glow}`,
                    } : undefined}
                  >
                    {/* Badge de estado */}
                    <div className="absolute top-2 sm:top-3 right-2 sm:right-3">
                      {esBloqueada ? (
                        <div className="flex items-center gap-1 px-1.5 sm:px-2 py-0.5 sm:py-1 bg-slate-900/60 border border-slate-700 rounded-md sm:rounded-lg">
                          <Lock className="w-2.5 sm:w-3 h-2.5 sm:h-3 text-slate-400" />
                          <span className="text-[10px] sm:text-xs font-bold text-slate-400">BLOQUEADA</span>
                        </div>
                      ) : esDisponible ? (
                        <div className="flex items-center gap-1 px-1.5 sm:px-2 py-0.5 sm:py-1 bg-green-500/30 border border-green-400 rounded-md sm:rounded-lg">
                          <Sparkles className="w-2.5 sm:w-3 h-2.5 sm:h-3 text-green-400" />
                          <span className="text-[10px] sm:text-xs font-bold text-green-300">DISPONIBLE</span>
                        </div>
                      ) : null}
                    </div>

                    {/* Emoji del tema */}
                    <div className={`text-5xl sm:text-6xl mb-2 sm:mb-3 ${esBloqueada ? 'opacity-40 grayscale' : ''}`}>
                      {config.emoji}
                    </div>

                    {/* T√≠tulo */}
                    <h3 className={`text-lg sm:text-xl font-black mb-2 ${esBloqueada ? 'text-slate-500' : 'text-white'}`}>
                      {tarea.titulo}
                    </h3>

                    {/* Descripci√≥n */}
                    <p className={`text-xs sm:text-sm mb-3 sm:mb-4 ${esBloqueada ? 'text-slate-600' : 'text-white/80'}`}>
                      {tarea.descripcion}
                    </p>

                    {/* Info adicional */}
                    <div className="space-y-2">
                      {/* Semana */}
                      <div className="flex items-center gap-2">
                        <Calendar className={`w-3.5 sm:w-4 h-3.5 sm:h-4 ${esBloqueada ? 'text-slate-600' : 'text-white/70'}`} />
                        <span className={`text-[11px] sm:text-xs font-bold ${esBloqueada ? 'text-slate-600' : 'text-white/90'}`}>
                          Semana {tarea.semana}
                        </span>
                      </div>

                      {/* Fecha disponible (si est√° bloqueada) */}
                      {esBloqueada && tarea.fecha_disponible && (
                        <div className="flex items-center gap-2">
                          <Clock className="w-3.5 sm:w-4 h-3.5 sm:h-4 text-slate-600" />
                          <span className="text-[11px] sm:text-xs font-bold text-slate-600">
                            Disponible: {new Date(tarea.fecha_disponible).toLocaleDateString('es-AR', {
                              day: '2-digit',
                              month: 'long'
                            })}
                          </span>
                        </div>
                      )}

                      {/* Actividades */}
                      <div className="flex items-center gap-2">
                        <CheckCircle2 className={`w-3.5 sm:w-4 h-3.5 sm:h-4 ${esBloqueada ? 'text-slate-600' : 'text-white/70'}`} />
                        <span className={`text-[11px] sm:text-xs font-bold ${esBloqueada ? 'text-slate-600' : 'text-white/90'}`}>
                          {tarea.actividades_completadas}/{tarea.total_actividades} actividades
                        </span>
                      </div>

                      {/* Barra de progreso (solo si no est√° bloqueada) */}
                      {!esBloqueada && (
                        <div className="mt-2 sm:mt-3 w-full h-1.5 sm:h-2 bg-white/20 rounded-full overflow-hidden">
                          <motion.div
                            initial={{ width: 0 }}
                            animate={{ width: `${progreso}%` }}
                            transition={{ duration: 1, delay: index * 0.1 + 0.3 }}
                            className="h-full bg-gradient-to-r from-white to-white/80 rounded-full"
                          />
                        </div>
                      )}
                    </div>

                    {/* Overlay de bloqueo */}
                    {esBloqueada && (
                      <div className="absolute inset-0 bg-slate-900/60 backdrop-blur-[2px] rounded-xl sm:rounded-2xl flex items-center justify-center">
                        <div className="text-center">
                          <Lock className="w-10 sm:w-12 h-10 sm:h-12 text-slate-500 mx-auto mb-2" />
                          <p className="text-slate-400 text-xs sm:text-sm font-bold">Completa las tareas anteriores</p>
                        </div>
                      </div>
                    )}
                  </motion.div>
                );
              })}
            </div>
          )}
        </div>

        {/* Footer con info */}
        <div className="flex-shrink-0 p-3 sm:p-4 border-t border-white/10 bg-black/20">
          <div className="flex items-center gap-2 text-cyan-300">
            <AlertCircle className="w-3.5 sm:w-4 h-3.5 sm:h-4" />
            <p className="text-[10px] sm:text-xs font-bold">
              Las tareas se desbloquean autom√°ticamente cuando completes las anteriores
            </p>
          </div>
        </div>
      </motion.div>
    </div>
  );
}
