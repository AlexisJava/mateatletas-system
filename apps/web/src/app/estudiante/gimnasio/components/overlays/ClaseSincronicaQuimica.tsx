/**
 * CLASE SINCR√ìNICA - EL LABORATORIO DE MEZCLAS M√ÅGICAS
 * 90 minutos de aventura educativa donde matem√°tica + qu√≠mica salvan la ciudad
 *
 * NARRATIVA COMPLETA:
 * Los estudiantes son aprendices en el Laboratorio de Mezclas M√°gicas.
 * La ciudad est√° en peligro: el agua se est√° volviendo gris y sin sabor.
 * La Dra. Luna necesita ayuda para crear el "Cristal Arco√≠ris", un compuesto
 * que puede purificar toda el agua de la ciudad.
 *
 * Para lograrlo, deben aprender:
 * - Qu√© son los √°tomos y mol√©culas
 * - C√≥mo funcionan las mezclas y concentraciones
 * - Proporciones matem√°ticas en recetas qu√≠micas
 * - Balanceo de ecuaciones
 * - Gesti√≥n de presupuesto con recursos limitados
 */

'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  ArrowLeft,
  Video,
  Users,
  ExternalLink,
  Clock,
  CheckCircle,
  AlertCircle,
  Sparkles,
  Beaker,
  Droplet,
  DollarSign,
  Trophy,
  Star
} from 'lucide-react';
import { useOverlayStack } from '../../contexts/OverlayStackProvider';
import { obtenerGrupoEtario } from '../../utils/edad.utils';
import type { OverlayConfig } from '../../types/overlay.types';

export interface ClaseSincronicaQuimicaProps {
  config?: OverlayConfig & { type: 'ejecutar-actividad'; actividadId: string };
  estudiante?: {
    nombre: string;
    apellido?: string;
    fecha_nacimiento?: string;
    id?: string;
  };
  onFinalizar?: () => void;
}

type Fase =
  | 'acceso'         // Pantalla inicial con link de Meet
  | 'introduccion'   // Historia: La ciudad en peligro
  | 'teoria'         // Teor√≠a: √Åtomos, mol√©culas, mezclas
  | 'tutorial'       // Tutorial: C√≥mo usar el laboratorio
  | 'experimento1'   // Experimento guiado: Mezcla de colores
  | 'experimento2'   // Experimento guiado: Concentraciones
  | 'quizzes'        // Quizzes educativos con explicaciones
  | 'desafio'        // Desaf√≠o final: Crear el Cristal Arco√≠ris
  | 'cierre';        // Celebraci√≥n y resumen

export function ClaseSincronicaQuimica({ config, estudiante, onFinalizar }: ClaseSincronicaQuimicaProps) {
  const { pop } = useOverlayStack();
  const [faseActual, setFaseActual] = useState<Fase>('acceso');

  const handleVolver = () => {
    if (onFinalizar) {
      onFinalizar();
    } else {
      pop();
    }
  };

  // Calcular grupo etario del estudiante
  const grupoEtario = estudiante?.fecha_nacimiento
    ? obtenerGrupoEtario(estudiante.fecha_nacimiento)
    : '8-9';

  // Mock de link de Meet (en producci√≥n vendr√≠a del backend)
  const LINK_MEET_EJEMPLO = 'https://meet.google.com/abc-defg-hij';

  const handleIniciarClase = () => {
    setFaseActual('introduccion');
  };

  const handleUnirseAMeet = () => {
    window.open(LINK_MEET_EJEMPLO, '_blank');
  };

  const renderPantalla = () => {
    switch (faseActual) {
      case 'acceso':
        return <PantallaAcceso
          linkMeet={LINK_MEET_EJEMPLO}
          onIniciarClase={handleIniciarClase}
          onUnirseAMeet={handleUnirseAMeet}
          estudiante={estudiante}
        />;

      case 'introduccion':
        return <FaseIntroduccion
          grupoEtario={grupoEtario}
          estudiante={estudiante}
          onContinuar={() => setFaseActual('teoria')}
        />;

      case 'teoria':
        return <FaseTeoria
          grupoEtario={grupoEtario}
          onContinuar={() => setFaseActual('tutorial')}
        />;

      case 'tutorial':
        return <FaseTutorial
          grupoEtario={grupoEtario}
          onContinuar={() => setFaseActual('experimento1')}
        />;

      case 'experimento1':
        return <FaseExperimento1
          grupoEtario={grupoEtario}
          onContinuar={() => setFaseActual('experimento2')}
        />;

      case 'experimento2':
        return <FaseExperimento2
          grupoEtario={grupoEtario}
          onContinuar={() => setFaseActual('quizzes')}
        />;

      case 'quizzes':
        return <FaseQuizzes
          grupoEtario={grupoEtario}
          onContinuar={() => setFaseActual('desafio')}
        />;

      case 'desafio':
        return <FaseDesafioFinal
          grupoEtario={grupoEtario}
          onContinuar={() => setFaseActual('cierre')}
        />;

      case 'cierre':
        return <FaseCierre
          grupoEtario={grupoEtario}
          onVolver={handleVolver}
        />;

      default:
        return null;
    }
  };

  return (
    <div className="fixed inset-0 z-50">
      {/* Background base */}
      <div
        className="absolute inset-0"
        style={{
          background: 'linear-gradient(135deg, #0a4b3e 0%, #064e3b 50%, #1e3a5f 100%)',
        }}
      />

      {/* Part√≠culas sutiles de fondo */}
      <ParticulasQuimicas />

      {/* Header con info de la clase */}
      <div className="absolute top-0 left-0 right-0 z-10 p-4">
        <div className="flex items-center justify-between">
          <motion.button
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            onClick={handleVolver}
            className="
              bg-black/40 backdrop-blur-md
              border-2 border-white/30
              rounded-xl px-4 py-2
              flex items-center gap-2
              text-white font-bold
              hover:bg-black/60
            "
            style={{ transition: 'none' }}
          >
            <ArrowLeft className="w-5 h-5" />
            VOLVER
          </motion.button>

          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="
              bg-black/40 backdrop-blur-md
              border-2 border-emerald-400/50
              rounded-xl px-6 py-2
            "
          >
            <div className="text-center">
              <div className="text-emerald-300 font-black text-lg">
                üß™ EL LABORATORIO DE MEZCLAS M√ÅGICAS
              </div>
              <div className="text-white/70 text-sm font-bold">
                Clase Sincr√≥nica ‚Ä¢ 90 minutos
              </div>
            </div>
          </motion.div>

          <div className="w-[120px]" /> {/* Spacer */}
        </div>
      </div>

      {/* Contenido principal */}
      <div className="relative z-0 h-full pt-20">
        <AnimatePresence mode="wait">
          {renderPantalla()}
        </AnimatePresence>
      </div>
    </div>
  );
}

/**
 * ============================================================================
 * COMPONENTE: Part√≠culas de fondo
 * ============================================================================
 */
function ParticulasQuimicas() {
  const particulas = Array.from({ length: 20 });

  return (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      {particulas.map((_, i) => {
        const size = 10 + Math.random() * 30;
        const duration = 20 + Math.random() * 15;
        const delay = Math.random() * 5;
        const xMovement = (Math.random() - 0.5) * 30;

        return (
          <motion.div
            key={i}
            className="absolute"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              width: size,
              height: size,
            }}
            initial={{ opacity: 0 }}
            animate={{
              opacity: [0.1, 0.3, 0.2, 0.3, 0.1],
              scale: [1, 1.05, 1.02, 1.05, 1],
              x: [0, xMovement, -xMovement, 0],
              rotate: [0, 180],
            }}
            transition={{
              duration,
              delay,
              repeat: Infinity,
              ease: 'linear',
            }}
          >
            <div
              className="w-full h-full rounded-full"
              style={{
                background: `radial-gradient(circle, ${
                  i % 3 === 0 ? '#10b981' : i % 3 === 1 ? '#3b82f6' : '#a855f7'
                }40, transparent)`,
                filter: 'blur(2px)',
              }}
            />
          </motion.div>
        );
      })}
    </div>
  );
}

/**
 * ============================================================================
 * FASE 0: PANTALLA DE ACCESO
 * ============================================================================
 */
interface PantallaAccesoProps {
  linkMeet: string;
  onIniciarClase: () => void;
  onUnirseAMeet: () => void;
  estudiante?: { nombre: string };
}

function PantallaAcceso({ linkMeet, onIniciarClase, onUnirseAMeet, estudiante }: PantallaAccesoProps) {
  return (
    <div className="h-full p-6 relative flex items-center justify-center">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.9 }}
        className="w-full h-full rounded-3xl p-8 border-4 relative overflow-hidden flex flex-col"
        style={{
          background: 'rgba(6, 78, 59, 0.4)',
          borderColor: 'rgba(16, 185, 129, 0.5)',
          backdropFilter: 'blur(40px) saturate(180%)',
        }}
      >
        {/* Bienvenida */}
        <div className="text-center mb-4 relative z-10 flex-shrink-0">
          <motion.div
            animate={{
              scale: [1, 1.1, 1],
              rotate: [0, 5, -5, 0],
            }}
            transition={{ duration: 2, repeat: Infinity }}
            className="text-6xl mb-2"
          >
            üß™
          </motion.div>
          <h2 className="font-black text-4xl mb-1 leading-tight">
            <span
              className="text-emerald-300"
              style={{
                textShadow: '0 3px 0 rgba(0,0,0,0.4), 0 0 20px rgba(16,185,129,0.6)',
                WebkitTextStroke: '2px rgba(0,0,0,0.3)',
              }}
            >
              ¬°Bienvenida, {estudiante?.nombre}!
            </span>
          </h2>
          <p className="text-white/80 text-lg font-bold">
            Al Laboratorio de Mezclas M√°gicas
          </p>
        </div>

        {/* Grid horizontal: Requerimientos + Google Meet */}
        <div className="grid grid-cols-2 gap-4 mb-4 flex-1 min-h-0">
          {/* Requerimientos */}
          <div
            className="rounded-2xl p-6 border-3 overflow-auto"
            style={{
              background: 'rgba(0, 0, 0, 0.3)',
              borderColor: 'rgba(255, 255, 255, 0.2)',
            }}
          >
            <div className="flex items-center gap-3 mb-4">
              <CheckCircle className="w-8 h-8 text-emerald-400" strokeWidth={3} />
              <h3
                className="text-2xl font-black text-white"
                style={{ textShadow: '0 2px 0 rgba(0,0,0,0.4)' }}
              >
                NECESITAS
              </h3>
            </div>

            <div className="space-y-3">
              {[
                { emoji: 'üíª', text: 'Computadora o tablet' },
                { emoji: 'üåê', text: 'Conexi√≥n a internet' },
                { emoji: 'üìù', text: 'Papel y l√°piz para anotar' },
                { emoji: 'üéß', text: 'Auriculares (recomendado)' },
              ].map((item, idx) => (
                <motion.div
                  key={idx}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.1 * idx }}
                  className="flex items-center gap-3 p-3 rounded-xl"
                  style={{ background: 'rgba(255, 255, 255, 0.1)' }}
                >
                  <span className="text-3xl">{item.emoji}</span>
                  <span className="text-white font-bold text-lg">{item.text}</span>
                </motion.div>
              ))}
            </div>
          </div>

          {/* Google Meet */}
          <div
            className="rounded-2xl p-6 border-3"
            style={{
              background: 'rgba(0, 0, 0, 0.3)',
              borderColor: 'rgba(59, 130, 246, 0.4)',
            }}
          >
            <div className="flex items-center gap-3 mb-4">
              <Video className="w-8 h-8 text-blue-400" strokeWidth={3} />
              <h3
                className="text-2xl font-black text-white"
                style={{ textShadow: '0 2px 0 rgba(0,0,0,0.4)' }}
              >
                GOOGLE MEET
              </h3>
            </div>

            <div className="space-y-4">
              <p className="text-white/90 text-base font-bold leading-relaxed">
                La clase se realizar√° por videollamada con tu docente y compa√±eros.
              </p>

              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={onUnirseAMeet}
                className="
                  w-full
                  bg-gradient-to-b from-blue-500 to-blue-600
                  border-4 border-blue-700
                  rounded-2xl
                  p-4
                  flex items-center justify-center gap-3
                  shadow-[0_6px_0_rgba(30,64,175,1)]
                  hover:shadow-[0_8px_0_rgba(30,64,175,1)]
                  active:shadow-[0_2px_0_rgba(30,64,175,1)]
                  active:translate-y-1
                "
                style={{ transition: 'none' }}
              >
                <ExternalLink className="w-6 h-6 text-white" strokeWidth={3} />
                <span
                  className="text-white font-black text-xl"
                  style={{ textShadow: '0 2px 0 rgba(0,0,0,0.3)' }}
                >
                  UNIRSE A MEET
                </span>
              </motion.button>

              <div className="flex items-start gap-2 p-3 rounded-xl bg-blue-500/20 border-2 border-blue-400/30">
                <AlertCircle className="w-5 h-5 text-blue-300 flex-shrink-0 mt-0.5" />
                <p className="text-blue-200 text-sm font-bold">
                  √önete cuando tu docente te indique
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* INICIAR CLASE button */}
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={onIniciarClase}
          className="
            w-full
            text-white
            font-black text-2xl
            py-4
            rounded-2xl
            border-4
            flex-shrink-0
            shadow-[0_8px_0_rgba(0,0,0,0.6)]
            hover:shadow-[0_10px_0_rgba(0,0,0,0.6)]
            active:shadow-[0_2px_0_rgba(0,0,0,0.6)]
            active:translate-y-1
          "
          style={{
            background: 'linear-gradient(180deg, #10b981 0%, #059669 100%)',
            borderColor: '#047857',
            textShadow: '0 3px 0 rgba(0,0,0,0.4)',
            transition: 'none',
          }}
        >
          ‚ú® INICIAR CLASE ‚ú®
        </motion.button>
      </motion.div>
    </div>
  );
}

/**
 * ============================================================================
 * FASE 1: INTRODUCCI√ìN - LA HISTORIA
 * "La Ciudad en Peligro"
 * Duraci√≥n: ~5 minutos
 * ============================================================================
 */
interface FaseIntroduccionProps {
  grupoEtario: string;
  estudiante?: { nombre: string };
  onContinuar: () => void;
}

function FaseIntroduccion({ grupoEtario, estudiante, onContinuar }: FaseIntroduccionProps) {
  const [paso, setPaso] = useState(0);

  const historia = obtenerHistoriaIntroduccion(grupoEtario);

  const pasoActual = historia[paso];

  const avanzar = () => {
    if (paso < historia.length - 1) {
      setPaso(paso + 1);
    } else {
      onContinuar();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="h-full p-8 flex items-center justify-center"
    >
      <div className="max-w-4xl w-full">
        <AnimatePresence mode="wait">
          <motion.div
            key={paso}
            initial={{ opacity: 0, x: 100 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -100 }}
            className="
              rounded-3xl p-8 border-4
              backdrop-blur-xl
            "
            style={{
              background: 'rgba(0, 0, 0, 0.5)',
              borderColor: 'rgba(16, 185, 129, 0.5)',
            }}
          >
            {/* Emoji grande */}
            <motion.div
              animate={{
                scale: [1, 1.05, 1],
                rotate: [0, 2, -2, 0],
              }}
              transition={{ duration: 3, repeat: Infinity }}
              className="text-center text-8xl mb-6"
            >
              {pasoActual.emoji}
            </motion.div>

            {/* T√≠tulo */}
            <h2
              className="text-4xl font-black text-center mb-6"
              style={{
                textShadow: '0 3px 0 rgba(0,0,0,0.4), 0 0 20px rgba(16,185,129,0.6)',
              }}
            >
              <span className="text-emerald-300">{pasoActual.titulo}</span>
            </h2>

            {/* Texto */}
            <div className="space-y-4 mb-8">
              {pasoActual.parrafos.map((parrafo, idx) => (
                <motion.p
                  key={idx}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 * idx }}
                  className="text-white text-xl leading-relaxed font-bold text-center"
                >
                  {parrafo}
                </motion.p>
              ))}
            </div>

            {/* Progreso */}
            <div className="flex items-center justify-center gap-2 mb-6">
              {historia.map((_, idx) => (
                <div
                  key={idx}
                  className="h-2 rounded-full transition-all"
                  style={{
                    width: idx === paso ? 32 : 12,
                    background: idx === paso ? '#10b981' : 'rgba(255,255,255,0.3)',
                  }}
                />
              ))}
            </div>

            {/* Bot√≥n */}
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={avanzar}
              className="
                w-full
                bg-gradient-to-b from-emerald-500 to-emerald-600
                border-4 border-emerald-700
                rounded-2xl
                py-4
                text-white font-black text-2xl
                shadow-[0_6px_0_rgba(4,120,87,1)]
                hover:shadow-[0_8px_0_rgba(4,120,87,1)]
                active:shadow-[0_2px_0_rgba(4,120,87,1)]
                active:translate-y-1
              "
              style={{
                textShadow: '0 2px 0 rgba(0,0,0,0.3)',
                transition: 'none',
              }}
            >
              {paso < historia.length - 1 ? 'CONTINUAR ‚Üí' : '¬°ACEPTAR MISI√ìN! ‚ú®'}
            </motion.button>
          </motion.div>
        </AnimatePresence>
      </div>
    </motion.div>
  );
}

function obtenerHistoriaIntroduccion(grupoEtario: string) {
  const historiaBase = [
    {
      emoji: 'üèôÔ∏è',
      titulo: 'La Ciudad en Peligro',
      parrafos: [
        'Nuestra hermosa ciudad siempre tuvo agua cristalina y pura.',
        'Pero algo terrible est√° sucediendo...',
        'El agua se est√° volviendo gris, sin sabor, y las plantas est√°n marchit√°ndose.',
      ],
    },
    {
      emoji: 'üë©‚Äçüî¨',
      titulo: 'La Dra. Luna',
      parrafos: [
        'La Dra. Luna, la cient√≠fica m√°s brillante del Laboratorio de Mezclas M√°gicas, descubri√≥ algo importante:',
        '¬°El problema puede solucionarse con el CRISTAL ARCO√çRIS!',
        'Un compuesto qu√≠mico especial que puede purificar toda el agua de la ciudad.',
      ],
    },
    {
      emoji: 'üéØ',
      titulo: 'Tu Misi√≥n',
      parrafos: [
        `¬°Bienvenido al laboratorio, aprendiz!`,
        'Para crear el Cristal Arco√≠ris, necesitas aprender a combinar sustancias qu√≠micas usando matem√°ticas precisas.',
        '¬øEst√°s list@ para esta aventura?',
      ],
    },
  ];

  return historiaBase;
}

/**
 * ============================================================================
 * FASE 2: TEOR√çA - FUNDAMENTOS DE QU√çMICA
 * "¬øPor qu√© la qu√≠mica necesita matem√°ticas?"
 * Duraci√≥n: ~10 minutos
 * ============================================================================
 */
interface FaseTeoriaProps {
  grupoEtario: string;
  onContinuar: () => void;
}

function FaseTeoria({ grupoEtario, onContinuar }: FaseTeoriaProps) {
  const [concepto, setConcepto] = useState(0);

  const conceptos = obtenerConceptosTeoria(grupoEtario);

  const conceptoActual = conceptos[concepto];

  const avanzar = () => {
    if (concepto < conceptos.length - 1) {
      setConcepto(concepto + 1);
    } else {
      onContinuar();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="h-full p-8 flex items-center justify-center"
    >
      <div className="max-w-5xl w-full">
        <AnimatePresence mode="wait">
          <motion.div
            key={concepto}
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="
              rounded-3xl p-8 border-4
              backdrop-blur-xl
            "
            style={{
              background: 'rgba(0, 0, 0, 0.6)',
              borderColor: 'rgba(59, 130, 246, 0.5)',
            }}
          >
            {/* Badge del concepto */}
            <div className="flex justify-center mb-4">
              <div
                className="px-6 py-2 rounded-full border-3"
                style={{
                  background: 'rgba(59, 130, 246, 0.2)',
                  borderColor: 'rgba(59, 130, 246, 0.5)',
                }}
              >
                <span className="text-blue-300 font-black text-sm">
                  CONCEPTO {concepto + 1} DE {conceptos.length}
                </span>
              </div>
            </div>

            {/* Emoji */}
            <div className="text-center text-7xl mb-4">
              {conceptoActual.emoji}
            </div>

            {/* T√≠tulo */}
            <h2
              className="text-3xl font-black text-center mb-6"
              style={{
                textShadow: '0 3px 0 rgba(0,0,0,0.4)',
              }}
            >
              <span className="text-blue-300">{conceptoActual.titulo}</span>
            </h2>

            {/* Explicaci√≥n */}
            <div className="space-y-4 mb-6">
              {conceptoActual.explicacion.map((parrafo, idx) => (
                <motion.p
                  key={idx}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.1 * idx }}
                  className="text-white text-lg leading-relaxed font-bold"
                >
                  {parrafo}
                </motion.p>
              ))}
            </div>

            {/* Ejemplo visual */}
            {conceptoActual.ejemplo && (
              <div
                className="rounded-2xl p-6 mb-6 border-3"
                style={{
                  background: 'rgba(16, 185, 129, 0.1)',
                  borderColor: 'rgba(16, 185, 129, 0.3)',
                }}
              >
                <div className="flex items-center gap-2 mb-3">
                  <Sparkles className="w-5 h-5 text-emerald-400" />
                  <span className="text-emerald-300 font-black text-sm">EJEMPLO</span>
                </div>
                <p className="text-white text-lg font-bold leading-relaxed">
                  {conceptoActual.ejemplo}
                </p>
              </div>
            )}

            {/* Progreso */}
            <div className="flex items-center justify-center gap-2 mb-6">
              {conceptos.map((_, idx) => (
                <div
                  key={idx}
                  className="h-2 rounded-full transition-all"
                  style={{
                    width: idx === concepto ? 32 : 12,
                    background: idx === concepto ? '#3b82f6' : 'rgba(255,255,255,0.3)',
                  }}
                />
              ))}
            </div>

            {/* Bot√≥n */}
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={avanzar}
              className="
                w-full
                bg-gradient-to-b from-blue-500 to-blue-600
                border-4 border-blue-700
                rounded-2xl
                py-4
                text-white font-black text-2xl
                shadow-[0_6px_0_rgba(30,64,175,1)]
                hover:shadow-[0_8px_0_rgba(30,64,175,1)]
                active:shadow-[0_2px_0_rgba(30,64,175,1)]
                active:translate-y-1
              "
              style={{
                textShadow: '0 2px 0 rgba(0,0,0,0.3)',
                transition: 'none',
              }}
            >
              {concepto < conceptos.length - 1 ? 'SIGUIENTE ‚Üí' : '¬°ENTENDIDO! ‚úì'}
            </motion.button>
          </motion.div>
        </AnimatePresence>
      </div>
    </motion.div>
  );
}

function obtenerConceptosTeoria(grupoEtario: string) {
  // Adaptamos la complejidad seg√∫n edad
  const esChico = grupoEtario === '6-7';
  const esMedio = grupoEtario === '8-9';

  return [
    {
      emoji: '‚öõÔ∏è',
      titulo: '¬øQu√© son los √Åtomos?',
      explicacion: esChico
        ? [
            'Los √°tomos son las piezas m√°s peque√±as de todo lo que existe.',
            'Son como los ladrillos con los que se construye todo: el agua, el aire, ¬°hasta t√∫ est√°s hecho de √°tomos!',
            'Son tan peque√±os que no puedes verlos, pero est√°n en todas partes.',
          ]
        : [
            'Los √°tomos son las unidades m√°s peque√±as de la materia.',
            'Imagina que todo en el universo est√° hecho de piezas microsc√≥picas llamadas √°tomos.',
            'Hay diferentes tipos de √°tomos (ox√≠geno, hidr√≥geno, carbono...) y cada uno tiene propiedades √∫nicas.',
          ],
      ejemplo: esChico
        ? 'üß± Piensa en los √°tomos como bloques de LEGO: puedes unirlos de diferentes formas para construir cosas distintas.'
        : '‚öõÔ∏è El ox√≠geno que respiras est√° hecho de √°tomos de ox√≠geno (O). Dos √°tomos de ox√≠geno juntos forman O‚ÇÇ.',
    },
    {
      emoji: 'üîó',
      titulo: '¬øQu√© son las Mol√©culas?',
      explicacion: esChico
        ? [
            'Cuando unes dos o m√°s √°tomos, formas una mol√©cula.',
            'Es como cuando juntas dos bloques de LEGO: ahora tienes una pieza m√°s grande.',
            'El agua que tomas es una mol√©cula hecha de 2 √°tomos de hidr√≥geno y 1 de ox√≠geno.',
          ]
        : [
            'Una mol√©cula es un grupo de √°tomos unidos entre s√≠.',
            'Por ejemplo, el agua (H‚ÇÇO) es una mol√©cula formada por 2 √°tomos de hidr√≥geno y 1 de ox√≠geno.',
            'Las mol√©culas determinan las propiedades de las sustancias que conocemos.',
          ],
      ejemplo: esChico
        ? 'üíß AGUA = H‚ÇÇO = 2 hidr√≥genos + 1 ox√≠geno'
        : 'üíß H‚ÇÇO (agua) es diferente de H‚ÇÇO‚ÇÇ (agua oxigenada) aunque ambas tienen hidr√≥geno y ox√≠geno. ¬°Las proporciones importan!',
    },
    {
      emoji: 'üé®',
      titulo: 'Mezclas y Concentraciones',
      explicacion: esChico
        ? [
            'Cuando juntas dos sustancias, haces una mezcla.',
            'Por ejemplo, cuando mezclas agua con jugo en polvo, haces jugo.',
            'Si pones mucho polvo, el jugo queda muy fuerte. Si pones poco, queda aguado.',
          ]
        : [
            'Una mezcla combina dos o m√°s sustancias sin cambiar su composici√≥n qu√≠mica.',
            'La concentraci√≥n indica cu√°nto soluto (sustancia disuelta) hay en el solvente (l√≠quido).',
            'Ejemplo: 100ml de agua + 20g de sal = soluci√≥n con 20% de concentraci√≥n.',
          ],
      ejemplo: esChico
        ? 'üßÉ Si tienes 1 taza de agua y le pones 2 cucharadas de az√∫car, obtienes agua dulce. Si le pones 10 cucharadas, ¬°queda s√∫per dulce!'
        : '‚öóÔ∏è Una soluci√≥n al 10% significa: 10g de soluto por cada 100ml de soluci√≥n total.',
    },
    {
      emoji: 'üßÆ',
      titulo: '¬øPor qu√© necesitamos Matem√°ticas?',
      explicacion: esChico
        ? [
            'Los cient√≠ficos qu√≠micos usan matem√°ticas TODO EL TIEMPO.',
            'Para hacer una mezcla perfecta, necesitas las cantidades exactas.',
            'Si te equivocas en los n√∫meros, ¬°la mezcla no funcionar√°!',
          ]
        : [
            'La qu√≠mica es imposible sin matem√°ticas.',
            'Necesitas calcular proporciones exactas, balancear ecuaciones qu√≠micas, y optimizar recursos.',
            'Un error en los c√°lculos puede arruinar un experimento completo o incluso ser peligroso.',
          ],
      ejemplo: esChico
        ? 'üç™ Es como seguir una receta de galletas: si la receta dice 2 tazas de harina y pones 10, las galletas quedar√°n horribles.'
        : '‚öóÔ∏è Para crear 500ml de soluci√≥n al 15%, necesitas calcular: 500ml √ó 0.15 = 75g de soluto.',
    },
  ];
}

/**
 * ============================================================================
 * FASE 3: TUTORIAL - C√ìMO USAR EL LABORATORIO
 * Duraci√≥n: ~5 minutos
 * ============================================================================
 */
interface FaseTutorialProps {
  grupoEtario: string;
  onContinuar: () => void;
}

function FaseTutorial({ grupoEtario, onContinuar }: FaseTutorialProps) {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="h-full p-8 flex items-center justify-center"
    >
      <div className="max-w-4xl w-full">
        <div
          className="rounded-3xl p-8 border-4 backdrop-blur-xl"
          style={{
            background: 'rgba(0, 0, 0, 0.6)',
            borderColor: 'rgba(168, 85, 247, 0.5)',
          }}
        >
          <div className="text-center mb-6">
            <div className="text-7xl mb-4">üî¨</div>
            <h2
              className="text-4xl font-black text-purple-300"
              style={{ textShadow: '0 3px 0 rgba(0,0,0,0.4)' }}
            >
              TU LABORATORIO VIRTUAL
            </h2>
          </div>

          <div className="grid grid-cols-3 gap-4 mb-8">
            {[
              {
                emoji: '‚öóÔ∏è',
                titulo: 'REACTIVOS',
                desc: 'Sustancias qu√≠micas que puedes mezclar',
              },
              {
                emoji: 'üß™',
                titulo: 'MATRAZ',
                desc: 'Aqu√≠ mezclas las sustancias',
              },
              {
                emoji: 'üìä',
                titulo: 'MEDICIONES',
                desc: 'Ver temperatura, pH y cantidades',
              },
            ].map((item, idx) => (
              <motion.div
                key={idx}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.1 * idx }}
                className="text-center p-4 rounded-2xl border-3"
                style={{
                  background: 'rgba(168, 85, 247, 0.1)',
                  borderColor: 'rgba(168, 85, 247, 0.3)',
                }}
              >
                <div className="text-5xl mb-2">{item.emoji}</div>
                <div className="text-purple-300 font-black text-lg mb-1">
                  {item.titulo}
                </div>
                <div className="text-white/70 text-sm font-bold">
                  {item.desc}
                </div>
              </motion.div>
            ))}
          </div>

          <div
            className="rounded-2xl p-6 mb-6 border-3"
            style={{
              background: 'rgba(234, 179, 8, 0.1)',
              borderColor: 'rgba(234, 179, 8, 0.3)',
            }}
          >
            <div className="flex items-start gap-3">
              <AlertCircle className="w-6 h-6 text-yellow-400 flex-shrink-0 mt-1" />
              <div>
                <div className="text-yellow-300 font-black text-lg mb-2">
                  IMPORTANTE:
                </div>
                <p className="text-white font-bold leading-relaxed">
                  En un laboratorio REAL, los qu√≠micos deben seguir recetas EXACTAS.
                  Un error en las cantidades puede cambiar completamente el resultado.
                  ¬°Por eso las matem√°ticas son tan importantes!
                </p>
              </div>
            </div>
          </div>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={onContinuar}
            className="
              w-full
              bg-gradient-to-b from-purple-500 to-purple-600
              border-4 border-purple-700
              rounded-2xl
              py-4
              text-white font-black text-2xl
              shadow-[0_6px_0_rgba(88,28,135,1)]
              hover:shadow-[0_8px_0_rgba(88,28,135,1)]
              active:shadow-[0_2px_0_rgba(88,28,135,1)]
              active:translate-y-1
            "
            style={{
              textShadow: '0 2px 0 rgba(0,0,0,0.3)',
              transition: 'none',
            }}
          >
            ¬°EMPECEMOS A EXPERIMENTAR! üî¨
          </motion.button>
        </div>
      </div>
    </motion.div>
  );
}

/**
 * ============================================================================
 * FASE 4: EXPERIMENTO 1 - MEZCLA DE COLORES
 * "Aprende proporciones mezclando colores"
 * Duraci√≥n: ~15 minutos
 * ============================================================================
 */
interface FaseExperimento1Props {
  grupoEtario: string;
  onContinuar: () => void;
}

function FaseExperimento1({ grupoEtario, onContinuar }: FaseExperimento1Props) {
  const [objetivo, setObjetivo] = useState(0);
  const [rojo, setRojo] = useState(0);
  const [azul, setAzul] = useState(0);
  const [amarillo, setAmarillo] = useState(0);
  const [resultado, setResultado] = useState<string | null>(null);
  const [exito, setExito] = useState(false);

  const objetivos = [
    { color: 'VIOLETA', receta: { rojo: 2, azul: 3, amarillo: 0 }, emoji: 'üíú' },
    { color: 'VERDE', receta: { rojo: 0, azul: 2, amarillo: 3 }, emoji: 'üíö' },
    { color: 'NARANJA', receta: { rojo: 3, azul: 0, amarillo: 2 }, emoji: 'üß°' },
  ];

  const objetivoActual = objetivos[objetivo];

  const mezclar = () => {
    const match =
      rojo === objetivoActual.receta.rojo &&
      azul === objetivoActual.receta.azul &&
      amarillo === objetivoActual.receta.amarillo;

    if (match) {
      setResultado(`¬°Perfecto! Creaste ${objetivoActual.color}`);
      setExito(true);
    } else {
      setResultado(`Mmm... no es ${objetivoActual.color}. Revisa las proporciones.`);
      setExito(false);
    }
  };

  const siguienteObjetivo = () => {
    if (objetivo < objetivos.length - 1) {
      setObjetivo(objetivo + 1);
      setRojo(0);
      setAzul(0);
      setAmarillo(0);
      setResultado(null);
      setExito(false);
    } else {
      onContinuar();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="h-full p-8 flex items-center justify-center"
    >
      <div className="max-w-6xl w-full">
        <div
          className="rounded-3xl p-8 border-4 backdrop-blur-xl"
          style={{
            background: 'rgba(0, 0, 0, 0.6)',
            borderColor: 'rgba(236, 72, 153, 0.5)',
          }}
        >
          {/* Header */}
          <div className="text-center mb-6">
            <div className="text-6xl mb-3">üé®</div>
            <h2
              className="text-3xl font-black text-pink-300 mb-2"
              style={{ textShadow: '0 3px 0 rgba(0,0,0,0.4)' }}
            >
              EXPERIMENTO 1: MEZCLA DE COLORES
            </h2>
            <p className="text-white/80 text-lg font-bold">
              Objetivo {objetivo + 1}/3: Crear el color <span className="text-pink-300">{objetivoActual.color}</span>
            </p>
          </div>

          {/* Receta */}
          <div
            className="rounded-2xl p-6 mb-6 border-3"
            style={{
              background: 'rgba(16, 185, 129, 0.1)',
              borderColor: 'rgba(16, 185, 129, 0.3)',
            }}
          >
            <div className="flex items-center gap-2 mb-3">
              <Sparkles className="w-5 h-5 text-emerald-400" />
              <span className="text-emerald-300 font-black">RECETA SECRETA</span>
            </div>
            <p className="text-white text-xl font-bold">
              {objetivoActual.emoji} {objetivoActual.color}: {objetivoActual.receta.rojo} Rojo + {objetivoActual.receta.azul} Azul + {objetivoActual.receta.amarillo} Amarillo
            </p>
          </div>

          {/* Controles */}
          <div className="grid grid-cols-3 gap-4 mb-6">
            {[
              { color: 'ROJO', valor: rojo, setter: setRojo, bg: '#ef4444' },
              { color: 'AZUL', valor: azul, setter: setAzul, bg: '#3b82f6' },
              { color: 'AMARILLO', valor: amarillo, setter: setAmarillo, bg: '#eab308' },
            ].map((item) => (
              <div
                key={item.color}
                className="rounded-2xl p-4 border-3"
                style={{
                  background: 'rgba(0, 0, 0, 0.4)',
                  borderColor: `${item.bg}80`,
                }}
              >
                <div
                  className="text-center font-black text-lg mb-3"
                  style={{ color: item.bg }}
                >
                  {item.color}
                </div>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => item.setter(Math.max(0, item.valor - 1))}
                    className="w-10 h-10 rounded-xl bg-black/40 border-2 border-white/30 text-white font-black text-xl"
                  >
                    -
                  </button>
                  <div className="flex-1 text-center">
                    <div className="text-white font-black text-3xl">{item.valor}</div>
                  </div>
                  <button
                    onClick={() => item.setter(Math.min(5, item.valor + 1))}
                    className="w-10 h-10 rounded-xl bg-black/40 border-2 border-white/30 text-white font-black text-xl"
                  >
                    +
                  </button>
                </div>
              </div>
            ))}
          </div>

          {/* Resultado */}
          {resultado && (
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              className={`rounded-2xl p-6 mb-6 border-3 ${
                exito ? 'bg-green-500/20 border-green-500/50' : 'bg-red-500/20 border-red-500/50'
              }`}
            >
              <p className={`text-xl font-black text-center ${exito ? 'text-green-300' : 'text-red-300'}`}>
                {resultado}
              </p>
            </motion.div>
          )}

          {/* Botones */}
          <div className="flex gap-4">
            {!exito ? (
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={mezclar}
                className="
                  flex-1
                  bg-gradient-to-b from-pink-500 to-pink-600
                  border-4 border-pink-700
                  rounded-2xl
                  py-4
                  text-white font-black text-2xl
                  shadow-[0_6px_0_rgba(157,23,77,1)]
                "
                style={{ transition: 'none' }}
              >
                üî¨ MEZCLAR
              </motion.button>
            ) : (
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={siguienteObjetivo}
                className="
                  flex-1
                  bg-gradient-to-b from-green-500 to-green-600
                  border-4 border-green-700
                  rounded-2xl
                  py-4
                  text-white font-black text-2xl
                  shadow-[0_6px_0_rgba(21,128,61,1)]
                "
                style={{ transition: 'none' }}
              >
                {objetivo < objetivos.length - 1 ? 'SIGUIENTE COLOR ‚Üí' : '¬°CONTINUAR! ‚úì'}
              </motion.button>
            )}
          </div>
        </div>
      </div>
    </motion.div>
  );
}

/**
 * ============================================================================
 * FASE 5: EXPERIMENTO 2 - CONCENTRACIONES
 * "Aprende concentraciones con soluto + solvente"
 * Duraci√≥n: ~15 minutos
 * ============================================================================
 */
interface FaseExperimento2Props {
  grupoEtario: string;
  onContinuar: () => void;
}

function FaseExperimento2({ grupoEtario, onContinuar }: FaseExperimento2Props) {
  const [nivel, setNivel] = useState(0);
  const [agua, setAgua] = useState(0);
  const [soluto, setSoluto] = useState(0);
  const [resultado, setResultado] = useState<string | null>(null);
  const [exito, setExito] = useState(false);

  const niveles = obtenerNivelesConcentracion(grupoEtario);
  const nivelActual = niveles[nivel];

  const calcularConcentracion = () => {
    if (agua === 0) return 0;
    return Math.round((soluto / (agua + soluto)) * 100);
  };

  const verificar = () => {
    const concentracionActual = calcularConcentracion();
    const diferencia = Math.abs(concentracionActual - nivelActual.objetivo);

    if (diferencia <= nivelActual.tolerancia) {
      setResultado(`¬°Perfecto! Lograste ${concentracionActual}% (objetivo: ${nivelActual.objetivo}%)`);
      setExito(true);
    } else {
      setResultado(`Obtuviste ${concentracionActual}%, pero necesitas ${nivelActual.objetivo}%. ¬°Intenta de nuevo!`);
      setExito(false);
    }
  };

  const siguienteNivel = () => {
    if (nivel < niveles.length - 1) {
      setNivel(nivel + 1);
      setAgua(0);
      setSoluto(0);
      setResultado(null);
      setExito(false);
    } else {
      onContinuar();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="h-full p-8 flex items-center justify-center"
    >
      <div className="max-w-6xl w-full">
        <div
          className="rounded-3xl p-8 border-4 backdrop-blur-xl"
          style={{
            background: 'rgba(0, 0, 0, 0.6)',
            borderColor: 'rgba(59, 130, 246, 0.5)',
          }}
        >
          {/* Header */}
          <div className="text-center mb-6">
            <div className="text-6xl mb-3">üíß</div>
            <h2
              className="text-3xl font-black text-blue-300 mb-2"
              style={{ textShadow: '0 3px 0 rgba(0,0,0,0.4)' }}
            >
              EXPERIMENTO 2: CONCENTRACIONES
            </h2>
            <p className="text-white/80 text-lg font-bold">
              Nivel {nivel + 1}/{niveles.length}: {nivelActual.nombre}
            </p>
          </div>

          {/* Objetivo */}
          <div
            className="rounded-2xl p-6 mb-6 border-3"
            style={{
              background: 'rgba(16, 185, 129, 0.1)',
              borderColor: 'rgba(16, 185, 129, 0.3)',
            }}
          >
            <div className="text-emerald-300 font-black text-lg mb-2">
              üéØ OBJETIVO:
            </div>
            <p className="text-white text-xl font-bold">
              Crear una soluci√≥n con <span className="text-emerald-300">{nivelActual.objetivo}%</span> de concentraci√≥n
            </p>
            <p className="text-white/70 text-sm font-bold mt-2">
              {nivelActual.contexto}
            </p>
          </div>

          {/* Explicaci√≥n */}
          <div
            className="rounded-2xl p-4 mb-6 border-2"
            style={{
              background: 'rgba(234, 179, 8, 0.1)',
              borderColor: 'rgba(234, 179, 8, 0.3)',
            }}
          >
            <p className="text-yellow-200 text-sm font-bold">
              üí° F√≥rmula: Concentraci√≥n% = (Soluto √∑ Total) √ó 100
            </p>
          </div>

          {/* Controles */}
          <div className="grid grid-cols-2 gap-6 mb-6">
            <div
              className="rounded-2xl p-6 border-3"
              style={{
                background: 'rgba(59, 130, 246, 0.1)',
                borderColor: 'rgba(59, 130, 246, 0.3)',
              }}
            >
              <div className="flex items-center gap-2 mb-4">
                <Droplet className="w-6 h-6 text-blue-400" />
                <span className="text-blue-300 font-black text-xl">AGUA (Solvente)</span>
              </div>
              <div className="flex items-center gap-3">
                <button
                  onClick={() => setAgua(Math.max(0, agua - 10))}
                  className="w-12 h-12 rounded-xl bg-black/40 border-2 border-white/30 text-white font-black text-2xl"
                >
                  -
                </button>
                <div className="flex-1 text-center">
                  <div className="text-white font-black text-4xl">{agua}</div>
                  <div className="text-white/60 text-sm font-bold">ml</div>
                </div>
                <button
                  onClick={() => setAgua(agua + 10)}
                  className="w-12 h-12 rounded-xl bg-black/40 border-2 border-white/30 text-white font-black text-2xl"
                >
                  +
                </button>
              </div>
            </div>

            <div
              className="rounded-2xl p-6 border-3"
              style={{
                background: 'rgba(168, 85, 247, 0.1)',
                borderColor: 'rgba(168, 85, 247, 0.3)',
              }}
            >
              <div className="flex items-center gap-2 mb-4">
                <Beaker className="w-6 h-6 text-purple-400" />
                <span className="text-purple-300 font-black text-xl">SOLUTO (Sal)</span>
              </div>
              <div className="flex items-center gap-3">
                <button
                  onClick={() => setSoluto(Math.max(0, soluto - 5))}
                  className="w-12 h-12 rounded-xl bg-black/40 border-2 border-white/30 text-white font-black text-2xl"
                >
                  -
                </button>
                <div className="flex-1 text-center">
                  <div className="text-white font-black text-4xl">{soluto}</div>
                  <div className="text-white/60 text-sm font-bold">g</div>
                </div>
                <button
                  onClick={() => setSoluto(soluto + 5)}
                  className="w-12 h-12 rounded-xl bg-black/40 border-2 border-white/30 text-white font-black text-2xl"
                >
                  +
                </button>
              </div>
            </div>
          </div>

          {/* Medici√≥n actual */}
          {agua + soluto > 0 && (
            <div className="text-center mb-6">
              <div className="text-white/60 text-sm font-bold mb-1">CONCENTRACI√ìN ACTUAL:</div>
              <div className="text-cyan-300 font-black text-5xl">
                {calcularConcentracion()}%
              </div>
            </div>
          )}

          {/* Resultado */}
          {resultado && (
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              className={`rounded-2xl p-6 mb-6 border-3 ${
                exito ? 'bg-green-500/20 border-green-500/50' : 'bg-red-500/20 border-red-500/50'
              }`}
            >
              <p className={`text-xl font-black text-center ${exito ? 'text-green-300' : 'text-red-300'}`}>
                {resultado}
              </p>
            </motion.div>
          )}

          {/* Botones */}
          <div className="flex gap-4">
            {!exito ? (
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={verificar}
                disabled={agua + soluto === 0}
                className="
                  flex-1
                  bg-gradient-to-b from-blue-500 to-blue-600
                  border-4 border-blue-700
                  rounded-2xl
                  py-4
                  text-white font-black text-2xl
                  shadow-[0_6px_0_rgba(30,64,175,1)]
                  disabled:opacity-50
                "
                style={{ transition: 'none' }}
              >
                ‚úì VERIFICAR
              </motion.button>
            ) : (
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={siguienteNivel}
                className="
                  flex-1
                  bg-gradient-to-b from-green-500 to-green-600
                  border-4 border-green-700
                  rounded-2xl
                  py-4
                  text-white font-black text-2xl
                  shadow-[0_6px_0_rgba(21,128,61,1)]
                "
                style={{ transition: 'none' }}
              >
                {nivel < niveles.length - 1 ? 'SIGUIENTE NIVEL ‚Üí' : '¬°CONTINUAR! ‚úì'}
              </motion.button>
            )}
          </div>
        </div>
      </div>
    </motion.div>
  );
}

function obtenerNivelesConcentracion(grupoEtario: string) {
  if (grupoEtario === '6-7') {
    return [
      {
        nombre: 'Nivel Principiante',
        objetivo: 50,
        tolerancia: 10,
        contexto: 'Mitad agua, mitad sal',
      },
      {
        nombre: 'Nivel Intermedio',
        objetivo: 25,
        tolerancia: 10,
        contexto: 'Un cuarto de sal',
      },
    ];
  } else if (grupoEtario === '8-9') {
    return [
      {
        nombre: 'Nivel 1',
        objetivo: 20,
        tolerancia: 5,
        contexto: 'Suero fisiol√≥gico',
      },
      {
        nombre: 'Nivel 2',
        objetivo: 50,
        tolerancia: 5,
        contexto: 'Agua de mar',
      },
      {
        nombre: 'Nivel 3',
        objetivo: 10,
        tolerancia: 3,
        contexto: 'Soluci√≥n diluida',
      },
    ];
  } else {
    return [
      {
        nombre: 'Nivel 1',
        objetivo: 15,
        tolerancia: 3,
        contexto: 'Soluci√≥n hipot√≥nica',
      },
      {
        nombre: 'Nivel 2',
        objetivo: 35,
        tolerancia: 3,
        contexto: 'Soluci√≥n hipert√≥nica',
      },
      {
        nombre: 'Nivel 3',
        objetivo: 8,
        tolerancia: 2,
        contexto: 'Concentraci√≥n precisa',
      },
    ];
  }
}

/**
 * ============================================================================
 * FASE 6: QUIZZES EDUCATIVOS
 * Duraci√≥n: ~20 minutos
 * ============================================================================
 */
interface FaseQuizzesProps {
  grupoEtario: string;
  onContinuar: () => void;
}

function FaseQuizzes({ grupoEtario, onContinuar }: FaseQuizzesProps) {
  const [preguntaActual, setPreguntaActual] = useState(0);
  const [respuestaSeleccionada, setRespuestaSeleccionada] = useState<number | null>(null);
  const [mostrarExplicacion, setMostrarExplicacion] = useState(false);

  const preguntas = obtenerPreguntasQuiz(grupoEtario);
  const pregunta = preguntas[preguntaActual];

  const handleRespuesta = (idx: number) => {
    setRespuestaSeleccionada(idx);
    setMostrarExplicacion(true);
  };

  const siguientePregunta = () => {
    if (preguntaActual < preguntas.length - 1) {
      setPreguntaActual(preguntaActual + 1);
      setRespuestaSeleccionada(null);
      setMostrarExplicacion(false);
    } else {
      onContinuar();
    }
  };

  const esCorrecta = respuestaSeleccionada === pregunta.correcta;

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="h-full p-8 flex items-center justify-center"
    >
      <div className="max-w-4xl w-full">
        <div
          className="rounded-3xl p-8 border-4 backdrop-blur-xl"
          style={{
            background: 'rgba(0, 0, 0, 0.6)',
            borderColor: 'rgba(251, 191, 36, 0.5)',
          }}
        >
          {/* Header */}
          <div className="text-center mb-6">
            <div className="text-6xl mb-3">üß†</div>
            <h2
              className="text-3xl font-black text-yellow-300 mb-2"
              style={{ textShadow: '0 3px 0 rgba(0,0,0,0.4)' }}
            >
              QUIZZES EN VIVO
            </h2>
            <p className="text-white/80 text-lg font-bold">
              Pregunta {preguntaActual + 1} de {preguntas.length}
            </p>
          </div>

          {/* Pregunta */}
          <div className="mb-6">
            <p className="text-white text-2xl font-black text-center leading-relaxed">
              {pregunta.pregunta}
            </p>
          </div>

          {/* Opciones */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            {pregunta.opciones.map((opcion, idx) => {
              let bgColor = 'rgba(255, 255, 255, 0.1)';
              let borderColor = 'rgba(255, 255, 255, 0.3)';

              if (mostrarExplicacion) {
                if (idx === pregunta.correcta) {
                  bgColor = 'rgba(34, 197, 94, 0.3)';
                  borderColor = 'rgba(34, 197, 94, 0.8)';
                } else if (idx === respuestaSeleccionada) {
                  bgColor = 'rgba(239, 68, 68, 0.3)';
                  borderColor = 'rgba(239, 68, 68, 0.8)';
                }
              }

              return (
                <motion.button
                  key={idx}
                  whileHover={!mostrarExplicacion ? { scale: 1.05 } : {}}
                  whileTap={!mostrarExplicacion ? { scale: 0.95 } : {}}
                  onClick={() => !mostrarExplicacion && handleRespuesta(idx)}
                  disabled={mostrarExplicacion}
                  className="
                    rounded-2xl
                    p-6
                    border-3
                    text-white
                    font-black
                    text-xl
                    disabled:cursor-not-allowed
                  "
                  style={{
                    background: bgColor,
                    borderColor,
                    transition: 'none',
                  }}
                >
                  {opcion}
                </motion.button>
              );
            })}
          </div>

          {/* Explicaci√≥n */}
          {mostrarExplicacion && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className={`rounded-2xl p-6 mb-6 border-3 ${
                esCorrecta
                  ? 'bg-green-500/20 border-green-500/50'
                  : 'bg-orange-500/20 border-orange-500/50'
              }`}
            >
              <div className="flex items-start gap-3">
                <div className="text-3xl">{esCorrecta ? '‚úÖ' : 'üí°'}</div>
                <div>
                  <div
                    className={`font-black text-lg mb-2 ${
                      esCorrecta ? 'text-green-300' : 'text-orange-300'
                    }`}
                  >
                    {esCorrecta ? '¬°CORRECTO!' : 'APRENDE:'}
                  </div>
                  <p className="text-white font-bold leading-relaxed">
                    {pregunta.explicacion}
                  </p>
                </div>
              </div>
            </motion.div>
          )}

          {/* Bot√≥n */}
          {mostrarExplicacion && (
            <motion.button
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={siguientePregunta}
              className="
                w-full
                bg-gradient-to-b from-yellow-500 to-yellow-600
                border-4 border-yellow-700
                rounded-2xl
                py-4
                text-white font-black text-2xl
                shadow-[0_6px_0_rgba(161,98,7,1)]
              "
              style={{ transition: 'none' }}
            >
              {preguntaActual < preguntas.length - 1 ? 'SIGUIENTE PREGUNTA ‚Üí' : '¬°AL DESAF√çO FINAL! üèÜ'}
            </motion.button>
          )}
        </div>
      </div>
    </motion.div>
  );
}

function obtenerPreguntasQuiz(grupoEtario: string) {
  if (grupoEtario === '6-7') {
    return [
      {
        pregunta: '¬øQu√© son los √°tomos?',
        opciones: [
          'Las piezas m√°s peque√±as de todo',
          'Un tipo de planeta',
          'Una mascota',
          'Un juguete',
        ],
        correcta: 0,
        explicacion: 'Los √°tomos son las piezas m√°s peque√±as de todo lo que existe. Son como los bloques de LEGO del universo.',
      },
      {
        pregunta: 'Si mezclas 2 partes de rojo + 1 parte de amarillo, ¬øqu√© color obtienes?',
        opciones: ['Verde', 'Naranja', 'Violeta', 'Azul'],
        correcta: 1,
        explicacion: 'Rojo + Amarillo = Naranja. Las proporciones importan: m√°s rojo hace un naranja m√°s rojizo.',
      },
      {
        pregunta: '¬øPara qu√© sirven las matem√°ticas en qu√≠mica?',
        opciones: [
          'Para calcular las cantidades exactas',
          'Para hacer dibujos',
          'Para contar hasta 10',
          'No sirven para nada',
        ],
        correcta: 0,
        explicacion: 'Las matem√°ticas son S√öPER importantes en qu√≠mica para calcular cantidades exactas. Sin matem√°ticas, los experimentos no funcionan.',
      },
    ];
  } else if (grupoEtario === '8-9') {
    return [
      {
        pregunta: '¬øQu√© es H‚ÇÇO?',
        opciones: [
          'Un c√≥digo secreto',
          'La mol√©cula del agua',
          'Un tipo de sal',
          'Un elemento qu√≠mico',
        ],
        correcta: 1,
        explicacion: 'H‚ÇÇO es la f√≥rmula qu√≠mica del agua: 2 √°tomos de Hidr√≥geno + 1 √°tomo de Ox√≠geno forman una mol√©cula de agua.',
      },
      {
        pregunta: 'Si tienes 100ml de agua y agregas 25g de sal, ¬øqu√© concentraci√≥n obtienes?',
        opciones: ['10%', '20%', '25%', '50%'],
        correcta: 1,
        explicacion: 'Concentraci√≥n = (25 √∑ 125) √ó 100 = 20%. El total es 100ml + 25g = 125 unidades.',
      },
      {
        pregunta: '¬øPor qu√© es importante seguir proporciones exactas en qu√≠mica?',
        opciones: [
          'Para que se vea bonito',
          'Para que la reacci√≥n funcione correctamente',
          'No es importante',
          'Solo para impresionar',
        ],
        correcta: 1,
        explicacion: 'Las proporciones exactas son CR√çTICAS. Un peque√±o error puede cambiar completamente el resultado o hacer que la reacci√≥n no funcione.',
      },
    ];
  } else {
    return [
      {
        pregunta: '¬øQu√© representa el sub√≠ndice en H‚ÇÇO?',
        opciones: [
          'El peso del √°tomo',
          'El n√∫mero de √°tomos de ese elemento',
          'La temperatura',
          'El color',
        ],
        correcta: 1,
        explicacion: 'El sub√≠ndice indica cu√°ntos √°tomos de ese elemento hay en la mol√©cula. H‚ÇÇO = 2 hidr√≥genos, 1 ox√≠geno (el 1 no se escribe).',
      },
      {
        pregunta: 'Para hacer una soluci√≥n al 15%, necesitas 300ml total. ¬øCu√°ntos gramos de soluto necesitas?',
        opciones: ['15g', '30g', '45g', '60g'],
        correcta: 2,
        explicacion: 'Soluto = 300ml √ó 0.15 = 45g. La concentraci√≥n porcentual indica qu√© fracci√≥n del total es soluto.',
      },
      {
        pregunta: '¬øQu√© es balancear una ecuaci√≥n qu√≠mica?',
        opciones: [
          'Hacer que pese lo mismo',
          'Igualar el n√∫mero de √°tomos en ambos lados',
          'Mezclar todo parejo',
          'Usar la misma temperatura',
        ],
        correcta: 1,
        explicacion: 'Balancear significa asegurar que hay el MISMO n√∫mero de √°tomos de cada elemento antes y despu√©s de la reacci√≥n. Los √°tomos no se crean ni destruyen.',
      },
    ];
  }
}

/**
 * ============================================================================
 * FASE 7: DESAF√çO FINAL - CREAR EL CRISTAL ARCO√çRIS
 * "Trabajo en equipos con presupuesto limitado"
 * Duraci√≥n: ~20 minutos
 * ============================================================================
 */
interface FaseDesafioFinalProps {
  grupoEtario: string;
  onContinuar: () => void;
}

function FaseDesafioFinal({ grupoEtario, onContinuar }: FaseDesafioFinalProps) {
  const [paso, setPaso] = useState(0);

  const pasos = [
    {
      emoji: 'üèÜ',
      titulo: 'EL DESAF√çO FINAL',
      contenido: (
        <div className="space-y-4">
          <p className="text-white text-xl font-bold leading-relaxed">
            ¬°Ha llegado el momento de la verdad!
          </p>
          <p className="text-white text-xl font-bold leading-relaxed">
            Debes crear el <span className="text-cyan-300">CRISTAL ARCO√çRIS</span>, el compuesto que salvar√° toda el agua de la ciudad.
          </p>
          <div
            className="rounded-2xl p-6 border-3"
            style={{
              background: 'rgba(234, 179, 8, 0.1)',
              borderColor: 'rgba(234, 179, 8, 0.3)',
            }}
          >
            <p className="text-yellow-200 text-lg font-bold">
              ‚ö†Ô∏è RESTRICCIONES:
            </p>
            <ul className="text-white font-bold space-y-2 mt-3">
              <li>‚Ä¢ Presupuesto limitado: $500</li>
              <li>‚Ä¢ Debes producir exactamente 1000ml</li>
              <li>‚Ä¢ Concentraci√≥n objetivo: 30%</li>
              <li>‚Ä¢ Trabajo en EQUIPO con tu grupo</li>
            </ul>
          </div>
        </div>
      ),
    },
    {
      emoji: 'üí∞',
      titulo: 'GESTI√ìN DE PRESUPUESTO',
      contenido: (
        <div className="space-y-4">
          <p className="text-white text-xl font-bold">
            Tu docente te dar√° el PRECIO de cada reactivo:
          </p>
          <div className="grid grid-cols-2 gap-4">
            {[
              { reactivo: 'Agua destilada', precio: '$5/100ml', emoji: 'üíß' },
              { reactivo: 'Cristales base', precio: '$10/50g', emoji: 'üíé' },
              { reactivo: 'Catalizador', precio: '$20/10ml', emoji: '‚öóÔ∏è' },
              { reactivo: 'Estabilizador', precio: '$15/25g', emoji: 'üß™' },
            ].map((item) => (
              <div
                key={item.reactivo}
                className="rounded-xl p-4 border-2"
                style={{
                  background: 'rgba(59, 130, 246, 0.1)',
                  borderColor: 'rgba(59, 130, 246, 0.3)',
                }}
              >
                <div className="text-3xl mb-2">{item.emoji}</div>
                <div className="text-blue-300 font-black text-sm mb-1">
                  {item.reactivo}
                </div>
                <div className="text-white font-bold">{item.precio}</div>
              </div>
            ))}
          </div>
          <p className="text-orange-300 text-lg font-black text-center">
            ¬°Calcula bien! Si gastas m√°s de $500, pierdes.
          </p>
        </div>
      ),
    },
    {
      emoji: 'üë•',
      titulo: 'TRABAJO EN EQUIPO',
      contenido: (
        <div className="space-y-4">
          <p className="text-white text-xl font-bold leading-relaxed">
            Este desaf√≠o es COLABORATIVO. Tu docente dividir√° al grupo en equipos.
          </p>
          <div className="space-y-3">
            {[
              {
                rol: 'MATEM√ÅTICO',
                tarea: 'Calcula las proporciones exactas y el presupuesto',
                emoji: 'üßÆ',
              },
              {
                rol: 'QU√çMICO',
                tarea: 'Decide qu√© reactivos usar y en qu√© orden',
                emoji: 'üî¨',
              },
              {
                rol: 'GERENTE',
                tarea: 'Coordina al equipo y toma decisiones finales',
                emoji: 'üë®‚Äçüíº',
              },
            ].map((item) => (
              <div
                key={item.rol}
                className="rounded-xl p-4 border-2 flex items-start gap-3"
                style={{
                  background: 'rgba(16, 185, 129, 0.1)',
                  borderColor: 'rgba(16, 185, 129, 0.3)',
                }}
              >
                <div className="text-3xl">{item.emoji}</div>
                <div>
                  <div className="text-emerald-300 font-black mb-1">{item.rol}</div>
                  <div className="text-white font-bold text-sm">{item.tarea}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ),
    },
    {
      emoji: '‚ú®',
      titulo: '¬°A CREAR EL CRISTAL!',
      contenido: (
        <div className="space-y-4">
          <p className="text-white text-2xl font-black text-center leading-relaxed">
            Tu docente guiar√° la simulaci√≥n del experimento final.
          </p>
          <p className="text-white text-xl font-bold text-center leading-relaxed">
            Cada equipo presentar√° su plan y veremos qui√©n logra crear el Cristal Arco√≠ris perfecto.
          </p>
          <div
            className="rounded-2xl p-6 border-3"
            style={{
              background: 'rgba(168, 85, 247, 0.2)',
              borderColor: 'rgba(168, 85, 247, 0.5)',
            }}
          >
            <p className="text-purple-300 text-lg font-black text-center">
              üéØ CRITERIOS DE √âXITO:
            </p>
            <ul className="text-white font-bold space-y-2 mt-3 text-center">
              <li>‚úì Concentraci√≥n exacta (30% ¬±2%)</li>
              <li>‚úì Volumen correcto (1000ml ¬±50ml)</li>
              <li>‚úì Dentro del presupuesto ($500 m√°ximo)</li>
              <li>‚úì Trabajo en equipo y explicaci√≥n clara</li>
            </ul>
          </div>
        </div>
      ),
    },
  ];

  const pasoActual = pasos[paso];

  const avanzar = () => {
    if (paso < pasos.length - 1) {
      setPaso(paso + 1);
    } else {
      onContinuar();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="h-full p-8 flex items-center justify-center"
    >
      <div className="max-w-4xl w-full">
        <AnimatePresence mode="wait">
          <motion.div
            key={paso}
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="
              rounded-3xl p-8 border-4
              backdrop-blur-xl
            "
            style={{
              background: 'rgba(0, 0, 0, 0.6)',
              borderColor: 'rgba(251, 191, 36, 0.5)',
            }}
          >
            {/* Emoji */}
            <motion.div
              animate={{
                scale: [1, 1.1, 1],
                rotate: [0, 5, -5, 0],
              }}
              transition={{ duration: 2, repeat: Infinity }}
              className="text-center text-8xl mb-6"
            >
              {pasoActual.emoji}
            </motion.div>

            {/* T√≠tulo */}
            <h2
              className="text-4xl font-black text-center mb-6"
              style={{
                textShadow: '0 3px 0 rgba(0,0,0,0.4), 0 0 20px rgba(251,191,36,0.6)',
              }}
            >
              <span className="text-yellow-300">{pasoActual.titulo}</span>
            </h2>

            {/* Contenido */}
            <div className="mb-8">{pasoActual.contenido}</div>

            {/* Progreso */}
            <div className="flex items-center justify-center gap-2 mb-6">
              {pasos.map((_, idx) => (
                <div
                  key={idx}
                  className="h-2 rounded-full transition-all"
                  style={{
                    width: idx === paso ? 32 : 12,
                    background: idx === paso ? '#fbbf24' : 'rgba(255,255,255,0.3)',
                  }}
                />
              ))}
            </div>

            {/* Bot√≥n */}
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={avanzar}
              className="
                w-full
                bg-gradient-to-b from-yellow-500 to-yellow-600
                border-4 border-yellow-700
                rounded-2xl
                py-4
                text-white font-black text-2xl
                shadow-[0_6px_0_rgba(161,98,7,1)]
                hover:shadow-[0_8px_0_rgba(161,98,7,1)]
                active:shadow-[0_2px_0_rgba(161,98,7,1)]
                active:translate-y-1
              "
              style={{
                textShadow: '0 2px 0 rgba(0,0,0,0.3)',
                transition: 'none',
              }}
            >
              {paso < pasos.length - 1 ? 'CONTINUAR ‚Üí' : '¬°FINALIZAR CLASE! ‚ú®'}
            </motion.button>
          </motion.div>
        </AnimatePresence>
      </div>
    </motion.div>
  );
}

/**
 * ============================================================================
 * FASE 8: CIERRE Y CELEBRACI√ìN
 * Duraci√≥n: ~5 minutos
 * ============================================================================
 */
interface FaseCierreProps {
  grupoEtario: string;
  onVolver: () => void;
}

function FaseCierre({ grupoEtario, onVolver }: FaseCierreProps) {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="h-full p-8 flex items-center justify-center"
    >
      <div className="max-w-4xl w-full">
        <div
          className="rounded-3xl p-8 border-4 backdrop-blur-xl"
          style={{
            background: 'rgba(0, 0, 0, 0.6)',
            borderColor: 'rgba(16, 185, 129, 0.5)',
          }}
        >
          {/* Celebraci√≥n */}
          <motion.div
            animate={{
              scale: [1, 1.2, 1],
              rotate: [0, 10, -10, 0],
            }}
            transition={{ duration: 2, repeat: Infinity }}
            className="text-center text-9xl mb-6"
          >
            üéâ
          </motion.div>

          <h2
            className="text-5xl font-black text-center mb-6"
            style={{
              textShadow: '0 4px 0 rgba(0,0,0,0.4), 0 0 30px rgba(16,185,129,0.8)',
            }}
          >
            <span className="text-emerald-300">¬°LO LOGRASTE!</span>
          </h2>

          <p className="text-white text-2xl font-bold text-center mb-8 leading-relaxed">
            ¬°Salvaste el agua de la ciudad con tus conocimientos de qu√≠mica y matem√°ticas!
          </p>

          {/* Logros */}
          <div className="grid grid-cols-3 gap-4 mb-8">
            {[
              { emoji: '‚öõÔ∏è', titulo: 'QU√çMICO EXPERTO', desc: 'Dominaste √°tomos y mol√©culas' },
              { emoji: 'üßÆ', titulo: 'MATEM√ÅTICO PRO', desc: 'Calculaste proporciones perfectas' },
              { emoji: 'üèÜ', titulo: 'SALVADOR', desc: 'Salvaste la ciudad' },
            ].map((logro, idx) => (
              <motion.div
                key={idx}
                initial={{ opacity: 0, y: 20, scale: 0.8 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                transition={{ delay: 0.2 * idx, type: 'spring', bounce: 0.6 }}
                className="text-center p-6 rounded-2xl border-3"
                style={{
                  background: 'rgba(16, 185, 129, 0.2)',
                  borderColor: 'rgba(16, 185, 129, 0.5)',
                }}
              >
                <motion.div
                  animate={{ rotate: [0, 360] }}
                  transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}
                  className="text-6xl mb-3"
                >
                  {logro.emoji}
                </motion.div>
                <div className="text-emerald-300 font-black text-lg mb-2">
                  {logro.titulo}
                </div>
                <div className="text-white/80 text-sm font-bold">
                  {logro.desc}
                </div>
              </motion.div>
            ))}
          </div>

          {/* Mensaje final */}
          <div
            className="rounded-2xl p-6 mb-8 border-3"
            style={{
              background: 'rgba(59, 130, 246, 0.1)',
              borderColor: 'rgba(59, 130, 246, 0.3)',
            }}
          >
            <p className="text-blue-200 text-xl font-bold text-center leading-relaxed">
              üí° Recuerda: Las matem√°ticas y la qu√≠mica trabajan juntas todo el tiempo.
              ¬°Los cient√≠ficos qu√≠micos son tambi√©n matem√°ticos expertos!
            </p>
          </div>

          {/* Bot√≥n */}
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={onVolver}
            className="
              w-full
              bg-gradient-to-b from-emerald-500 to-emerald-600
              border-4 border-emerald-700
              rounded-2xl
              py-4
              text-white font-black text-2xl
              shadow-[0_6px_0_rgba(4,120,87,1)]
              hover:shadow-[0_8px_0_rgba(4,120,87,1)]
              active:shadow-[0_2px_0_rgba(4,120,87,1)]
              active:translate-y-1
            "
            style={{
              textShadow: '0 2px 0 rgba(0,0,0,0.3)',
              transition: 'none',
            }}
          >
            ‚ú® FINALIZAR Y VOLVER ‚ú®
          </motion.button>
        </div>
      </div>
    </motion.div>
  );
}
