/**
 * Tests TDD para mejoras en formulario de creaci칩n de docentes
 *
 * Estos tests verifican las nuevas caracter칤sticas:
 * 1. Campo password es OPCIONAL (se auto-genera si no se proporciona)
 * 2. Campos a침os_experiencia y bio est치n REMOVIDOS del formulario
 * 3. Checkboxes simples para Matem치tica/Programaci칩n (en lugar de selector complejo)
 * 4. Bot칩n "Lunes a viernes" para disponibilidad
 * 5. Bot칩n "Seleccionar todos" para disponibilidad
 * 6. T칤tulo profesional se mantiene
 */

import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import CreateDocenteForm from '../CreateDocenteForm';

describe('CreateDocenteForm - Mejoras (TDD)', () => {
  const mockOnSubmit = jest.fn();
  const mockOnCancel = jest.fn();
  const mockOnSwitchToAdmin = jest.fn();

  const defaultProps = {
    onSubmit: mockOnSubmit,
    onCancel: mockOnCancel,
    onSwitchToAdmin: mockOnSwitchToAdmin,
    isLoading: false,
    error: null,
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Estructura del formulario simplificado', () => {
    it('debe mostrar solo los campos requeridos: nombre, apellido, email, tel칠fono', () => {
      render(<CreateDocenteForm {...defaultProps} />);

      expect(screen.getByLabelText(/nombre/i)).toBeInTheDocument();
      expect(screen.getByLabelText(/apellido/i)).toBeInTheDocument();
      expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
      expect(screen.getByLabelText(/tel칠fono/i)).toBeInTheDocument();
    });

    it('NO debe mostrar campo de a침os de experiencia', () => {
      render(<CreateDocenteForm {...defaultProps} />);

      expect(screen.queryByLabelText(/a침os.*experiencia/i)).not.toBeInTheDocument();
      expect(screen.queryByLabelText(/experiencia/i)).not.toBeInTheDocument();
    });

    it('NO debe mostrar campo de biograf칤a', () => {
      render(<CreateDocenteForm {...defaultProps} />);

      expect(screen.queryByLabelText(/biograf칤a/i)).not.toBeInTheDocument();
      expect(screen.queryByLabelText(/bio/i)).not.toBeInTheDocument();
    });

    it('debe mostrar campo de t칤tulo profesional', () => {
      render(<CreateDocenteForm {...defaultProps} />);

      expect(screen.getByLabelText(/t칤tulo profesional/i)).toBeInTheDocument();
    });

    it('campo contrase침a debe ser OPCIONAL con texto explicativo', () => {
      render(<CreateDocenteForm {...defaultProps} />);

      const passwordSection = screen.getByText(/contrase침a/i).closest('div');
      expect(passwordSection).toHaveTextContent(/opcional/i);
      expect(passwordSection).toHaveTextContent(/se generar치 autom치ticamente/i);
    });
  });

  describe('Generaci칩n autom치tica de contrase침a', () => {
    it('debe permitir enviar formulario sin contrase침a', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      // Llenar solo campos requeridos (sin contrase침a)
      await userEvent.type(screen.getByLabelText(/nombre/i), 'Juan');
      await userEvent.type(screen.getByLabelText(/apellido/i), 'P칠rez');
      await userEvent.type(screen.getByLabelText(/email/i), 'juan@example.com');

      // Submit
      fireEvent.click(screen.getByRole('button', { name: /crear docente/i }));

      await waitFor(() => {
        expect(mockOnSubmit).toHaveBeenCalledWith(
          expect.objectContaining({
            nombre: 'Juan',
            apellido: 'P칠rez',
            email: 'juan@example.com',
            password: undefined, // Sin contrase침a = auto-generar
          }),
          expect.anything(),
        );
      });
    });

    it('debe permitir proporcionar contrase침a manual (opcional)', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      await userEvent.type(screen.getByLabelText(/nombre/i), 'Mar칤a');
      await userEvent.type(screen.getByLabelText(/apellido/i), 'Gonz치lez');
      await userEvent.type(screen.getByLabelText(/email/i), 'maria@example.com');
      await userEvent.type(screen.getByLabelText(/contrase침a/i), 'MiPasswordPersonal123!');

      fireEvent.click(screen.getByRole('button', { name: /crear docente/i }));

      await waitFor(() => {
        expect(mockOnSubmit).toHaveBeenCalledWith(
          expect.objectContaining({
            password: 'MiPasswordPersonal123!',
          }),
          expect.anything(),
        );
      });
    });

    it('debe mostrar icono "generar" al lado del campo contrase침a', () => {
      render(<CreateDocenteForm {...defaultProps} />);

      const passwordField = screen.getByLabelText(/contrase침a/i).closest('div');
      expect(passwordField?.querySelector('[data-icon="refresh"]')).toBeInTheDocument();
    });

    it('al hacer click en "generar", debe llenar el campo con contrase침a segura', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      const generateButton = screen.getByRole('button', { name: /generar contrase침a/i });
      await userEvent.click(generateButton);

      const passwordInput = screen.getByLabelText(/contrase침a/i) as HTMLInputElement;
      expect(passwordInput.value).toBeTruthy();
      expect(passwordInput.value.length).toBeGreaterThanOrEqual(12);

      // Verificar que contiene caracteres variados
      expect(/[a-z]/.test(passwordInput.value)).toBe(true); // min칰sculas
      expect(/[A-Z]/.test(passwordInput.value)).toBe(true); // may칰sculas
      expect(/[0-9]/.test(passwordInput.value)).toBe(true); // n칰meros
      expect(/[^a-zA-Z0-9]/.test(passwordInput.value)).toBe(true); // s칤mbolos
    });
  });

  describe('Selector de sectores simplificado', () => {
    it('debe mostrar SOLO 2 checkboxes: Matem치tica y Programaci칩n', () => {
      render(<CreateDocenteForm {...defaultProps} />);

      expect(screen.getByLabelText(/matem치tica/i)).toBeInTheDocument();
      expect(screen.getByLabelText(/programaci칩n/i)).toBeInTheDocument();

      // No debe haber otros sectores
      const checkboxes = screen.getAllByRole('checkbox').filter(cb =>
        cb.closest('div')?.textContent?.toLowerCase().includes('sector')
      );
      expect(checkboxes.length).toBeLessThanOrEqual(2);
    });

    it('debe permitir seleccionar Matem치tica', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      const mateCheckbox = screen.getByLabelText(/matem치tica/i) as HTMLInputElement;
      await userEvent.click(mateCheckbox);

      expect(mateCheckbox.checked).toBe(true);
    });

    it('debe permitir seleccionar Programaci칩n', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      const progCheckbox = screen.getByLabelText(/programaci칩n/i) as HTMLInputElement;
      await userEvent.click(progCheckbox);

      expect(progCheckbox.checked).toBe(true);
    });

    it('debe permitir seleccionar AMBOS sectores', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      const mateCheckbox = screen.getByLabelText(/matem치tica/i) as HTMLInputElement;
      const progCheckbox = screen.getByLabelText(/programaci칩n/i) as HTMLInputElement;

      await userEvent.click(mateCheckbox);
      await userEvent.click(progCheckbox);

      expect(mateCheckbox.checked).toBe(true);
      expect(progCheckbox.checked).toBe(true);
    });

    it('debe enviar sectores seleccionados en el submit', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      await userEvent.type(screen.getByLabelText(/nombre/i), 'Carlos');
      await userEvent.type(screen.getByLabelText(/apellido/i), 'Rodr칤guez');
      await userEvent.type(screen.getByLabelText(/email/i), 'carlos@example.com');

      // Seleccionar ambos sectores
      await userEvent.click(screen.getByLabelText(/matem치tica/i));
      await userEvent.click(screen.getByLabelText(/programaci칩n/i));

      fireEvent.click(screen.getByRole('button', { name: /crear docente/i }));

      await waitFor(() => {
        expect(mockOnSubmit).toHaveBeenCalledWith(
          expect.anything(),
          expect.arrayContaining([
            expect.objectContaining({ sectorNombre: 'Matem치tica' }),
            expect.objectContaining({ sectorNombre: 'Programaci칩n' }),
          ]),
        );
      });
    });

    it('checkboxes deben mostrar iconos: 游늻 para Matem치tica, 游눹 para Programaci칩n', () => {
      render(<CreateDocenteForm {...defaultProps} />);

      const mateLabel = screen.getByLabelText(/matem치tica/i).closest('label');
      const progLabel = screen.getByLabelText(/programaci칩n/i).closest('label');

      expect(mateLabel?.textContent).toContain('游늻');
      expect(progLabel?.textContent).toContain('游눹');
    });
  });

  describe('Mejoras UX en disponibilidad horaria', () => {
    it('debe mostrar bot칩n "Lunes a viernes"', () => {
      render(<CreateDocenteForm {...defaultProps} />);

      expect(screen.getByRole('button', { name: /lunes a viernes/i })).toBeInTheDocument();
    });

    it('al hacer click en "Lunes a viernes", debe marcar lunes, martes, mi칠rcoles, jueves, viernes', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      // Primero configurar horario (ej: 9-17)
      const horaInicioInput = screen.getByLabelText(/desde/i) as HTMLInputElement;
      const horaFinInput = screen.getByLabelText(/hasta/i) as HTMLInputElement;

      await userEvent.clear(horaInicioInput);
      await userEvent.type(horaInicioInput, '09:00');
      await userEvent.clear(horaFinInput);
      await userEvent.type(horaFinInput, '17:00');

      // Click en "Lunes a viernes"
      const lunesViernesButton = screen.getByRole('button', { name: /lunes a viernes/i });
      await userEvent.click(lunesViernesButton);

      // Verificar que se agregaron horarios para lunes-viernes
      await waitFor(() => {
        expect(screen.getByText(/lunes/i)).toBeInTheDocument();
        expect(screen.getByText(/martes/i)).toBeInTheDocument();
        expect(screen.getByText(/mi칠rcoles/i)).toBeInTheDocument();
        expect(screen.getByText(/jueves/i)).toBeInTheDocument();
        expect(screen.getByText(/viernes/i)).toBeInTheDocument();
      });
    });

    it('debe mostrar bot칩n "Seleccionar todos"', () => {
      render(<CreateDocenteForm {...defaultProps} />);

      expect(screen.getByRole('button', { name: /seleccionar todos/i })).toBeInTheDocument();
    });

    it('al hacer click en "Seleccionar todos", debe marcar los 7 d칤as de la semana', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      const horaInicioInput = screen.getByLabelText(/desde/i) as HTMLInputElement;
      const horaFinInput = screen.getByLabelText(/hasta/i) as HTMLInputElement;

      await userEvent.clear(horaInicioInput);
      await userEvent.type(horaInicioInput, '10:00');
      await userEvent.clear(horaFinInput);
      await userEvent.type(horaFinInput, '18:00');

      const seleccionarTodosButton = screen.getByRole('button', { name: /seleccionar todos/i });
      await userEvent.click(seleccionarTodosButton);

      await waitFor(() => {
        expect(screen.getByText(/lunes/i)).toBeInTheDocument();
        expect(screen.getByText(/martes/i)).toBeInTheDocument();
        expect(screen.getByText(/mi칠rcoles/i)).toBeInTheDocument();
        expect(screen.getByText(/jueves/i)).toBeInTheDocument();
        expect(screen.getByText(/viernes/i)).toBeInTheDocument();
        expect(screen.getByText(/s치bado/i)).toBeInTheDocument();
        expect(screen.getByText(/domingo/i)).toBeInTheDocument();
      });
    });

    it('botones deben estar deshabilitados si no se seleccion칩 horario', () => {
      render(<CreateDocenteForm {...defaultProps} />);

      const lunesViernesButton = screen.getByRole('button', { name: /lunes a viernes/i });
      const seleccionarTodosButton = screen.getByRole('button', { name: /seleccionar todos/i });

      // Sin horario configurado, los botones deben estar deshabilitados o mostrar tooltip
      expect(lunesViernesButton).toBeDisabled();
      expect(seleccionarTodosButton).toBeDisabled();
    });
  });

  describe('Validaciones del formulario', () => {
    it('nombre es requerido', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      // Llenar todos menos nombre
      await userEvent.type(screen.getByLabelText(/apellido/i), 'P칠rez');
      await userEvent.type(screen.getByLabelText(/email/i), 'test@example.com');

      fireEvent.click(screen.getByRole('button', { name: /crear docente/i }));

      // No debe llamar onSubmit
      expect(mockOnSubmit).not.toHaveBeenCalled();
    });

    it('apellido es requerido', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      await userEvent.type(screen.getByLabelText(/nombre/i), 'Juan');
      await userEvent.type(screen.getByLabelText(/email/i), 'test@example.com');

      fireEvent.click(screen.getByRole('button', { name: /crear docente/i }));

      expect(mockOnSubmit).not.toHaveBeenCalled();
    });

    it('email es requerido', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      await userEvent.type(screen.getByLabelText(/nombre/i), 'Juan');
      await userEvent.type(screen.getByLabelText(/apellido/i), 'P칠rez');

      fireEvent.click(screen.getByRole('button', { name: /crear docente/i }));

      expect(mockOnSubmit).not.toHaveBeenCalled();
    });

    it('email debe ser v치lido', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      await userEvent.type(screen.getByLabelText(/nombre/i), 'Juan');
      await userEvent.type(screen.getByLabelText(/apellido/i), 'P칠rez');
      await userEvent.type(screen.getByLabelText(/email/i), 'email-invalido');

      fireEvent.click(screen.getByRole('button', { name: /crear docente/i }));

      // HTML5 validation debe prevenir submit
      const emailInput = screen.getByLabelText(/email/i) as HTMLInputElement;
      expect(emailInput.validity.valid).toBe(false);
    });

    it('tel칠fono es opcional', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      await userEvent.type(screen.getByLabelText(/nombre/i), 'Ana');
      await userEvent.type(screen.getByLabelText(/apellido/i), 'Mart칤nez');
      await userEvent.type(screen.getByLabelText(/email/i), 'ana@example.com');
      // telefono omitido

      fireEvent.click(screen.getByRole('button', { name: /crear docente/i }));

      await waitFor(() => {
        expect(mockOnSubmit).toHaveBeenCalledWith(
          expect.objectContaining({
            telefono: '',
          }),
          expect.anything(),
        );
      });
    });

    it('t칤tulo profesional es opcional', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      await userEvent.type(screen.getByLabelText(/nombre/i), 'Pedro');
      await userEvent.type(screen.getByLabelText(/apellido/i), 'L칩pez');
      await userEvent.type(screen.getByLabelText(/email/i), 'pedro@example.com');
      // titulo omitido

      fireEvent.click(screen.getByRole('button', { name: /crear docente/i }));

      await waitFor(() => {
        expect(mockOnSubmit).toHaveBeenCalled();
      });
    });
  });

  describe('Manejo de errores', () => {
    it('debe mostrar mensaje de error si se proporciona', () => {
      render(<CreateDocenteForm {...defaultProps} error="El email ya est치 registrado" />);

      expect(screen.getByText(/el email ya est치 registrado/i)).toBeInTheDocument();
    });

    it('debe mostrar indicador de loading durante creaci칩n', () => {
      render(<CreateDocenteForm {...defaultProps} isLoading={true} />);

      expect(screen.getByText(/creando/i)).toBeInTheDocument();
      expect(screen.getByRole('button', { name: /creando/i })).toBeDisabled();
    });
  });

  describe('Integraci칩n con backend', () => {
    it('debe enviar estructura correcta al backend', async () => {
      render(<CreateDocenteForm {...defaultProps} />);

      await userEvent.type(screen.getByLabelText(/nombre/i), 'Laura');
      await userEvent.type(screen.getByLabelText(/apellido/i), 'Fern치ndez');
      await userEvent.type(screen.getByLabelText(/email/i), 'laura@example.com');
      await userEvent.type(screen.getByLabelText(/tel칠fono/i), '+54 9 11 1234-5678');
      await userEvent.type(screen.getByLabelText(/t칤tulo profesional/i), 'Licenciada en Matem치tica');

      // Seleccionar Matem치tica
      await userEvent.click(screen.getByLabelText(/matem치tica/i));

      fireEvent.click(screen.getByRole('button', { name: /crear docente/i }));

      await waitFor(() => {
        expect(mockOnSubmit).toHaveBeenCalledWith(
          {
            nombre: 'Laura',
            apellido: 'Fern치ndez',
            email: 'laura@example.com',
            telefono: '+54 9 11 1234-5678',
            titulo: 'Licenciada en Matem치tica',
            password: undefined, // Auto-generar
            estado: 'activo',
            disponibilidad_horaria: expect.any(Object),
          },
          expect.arrayContaining([
            expect.objectContaining({
              sectorNombre: 'Matem치tica',
              sectorIcono: '游늻',
            }),
          ]),
        );
      });
    });
  });
});
