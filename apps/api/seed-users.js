const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Creando usuarios de prueba para todos los roles...\n');

  const password = await bcrypt.hash('Test123!', 10);

  // 1. ADMIN
  console.log('üëë Creando Admin...');
  const admin = await prisma.user.upsert({
    where: { email: 'admin@test.com' },
    update: {},
    create: {
      email: 'admin@test.com',
      password,
      nombre: 'Admin',
      apellido: 'Test',
      role: 'admin',
      ha_completado_onboarding: true,
    },
  });
  console.log('   ‚úÖ Admin creado:', admin.email);

  // 2. DOCENTE
  console.log('\nüë®‚Äçüè´ Creando Docente...');
  const docenteUser = await prisma.user.upsert({
    where: { email: 'docente@test.com' },
    update: {},
    create: {
      email: 'docente@test.com',
      password,
      nombre: 'Mar√≠a',
      apellido: 'Gonz√°lez',
      role: 'docente',
      ha_completado_onboarding: true,
    },
  });

  try {
    const docente = await prisma.docente.upsert({
      where: { user_id: docenteUser.id },
      update: {},
      create: {
        user_id: docenteUser.id,
        especialidad: 'Matem√°ticas',
        a√±os_experiencia: 5,
        calificacion_promedio: 4.8,
        bio: 'Profesora de matem√°ticas con 5 a√±os de experiencia',
        disponible: true,
      },
    });
    console.log('   ‚úÖ Docente creado:', docenteUser.email);
  } catch (e) {
    console.log('   ‚ö†Ô∏è Docente ya existe');
  }

  // 3. TUTOR (Padre/Madre)
  console.log('\nüë®‚Äçüë©‚Äçüëß Creando Tutor...');
  const tutor = await prisma.user.upsert({
    where: { email: 'tutor@test.com' },
    update: {},
    create: {
      email: 'tutor@test.com',
      password,
      nombre: 'Carlos',
      apellido: 'Rodr√≠guez',
      role: 'tutor',
      telefono: '1234567890',
      ha_completado_onboarding: true,
    },
  });
  console.log('   ‚úÖ Tutor creado:', tutor.email);

  // 4. ESTUDIANTE
  console.log('\nüéì Creando Estudiante...');
  const estudianteUser = await prisma.user.upsert({
    where: { email: 'estudiante@test.com' },
    update: {},
    create: {
      email: 'estudiante@test.com',
      password,
      nombre: 'Juan',
      apellido: 'P√©rez',
      role: 'tutor',
      ha_completado_onboarding: true,
    },
  });

  try {
    const estudiante = await prisma.estudiante.upsert({
      where: { user_id: estudianteUser.id },
      update: {},
      create: {
        user_id: estudianteUser.id,
        telefono: '0987654321',
        fecha_nacimiento: new Date('2010-05-15'),
      },
    });
    console.log('   ‚úÖ Estudiante creado:', estudianteUser.email);

    // 5. Crear equipo para el estudiante
    console.log('\nüèÜ Creando Equipo de prueba...');
    const equipo = await prisma.equipo.upsert({
      where: { nombre: 'Equipo Alfa' },
      update: {},
      create: {
        nombre: 'Equipo Alfa',
        puntos_totales: 0,
        color: '#667eea',
        nivel_actual: 1,
      },
    });

    // Asignar estudiante al equipo
    await prisma.estudiante.update({
      where: { id: estudiante.id },
      data: { equipo_id: equipo.id },
    });
    console.log('   ‚úÖ Equipo creado y estudiante asignado');
  } catch (e) {
    console.log('   ‚ö†Ô∏è Estudiante ya existe');
  }

  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ USUARIOS DE PRUEBA CREADOS EXITOSAMENTE');
  console.log('='.repeat(60));
  console.log('\nüìã CREDENCIALES (todas usan la misma contrase√±a):');
  console.log('\n   üîë Password para todos: Test123!\n');
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ    ROL      ‚îÇ        EMAIL         ‚îÇ     DASHBOARD       ‚îÇ');
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
  console.log('‚îÇ üëë Admin    ‚îÇ admin@test.com       ‚îÇ /admin/dashboard    ‚îÇ');
  console.log('‚îÇ üë®‚Äçüè´ Docente  ‚îÇ docente@test.com     ‚îÇ /docente/dashboard  ‚îÇ');
  console.log('‚îÇ üë®‚Äçüë©‚Äçüëß Tutor    ‚îÇ tutor@test.com       ‚îÇ /login              ‚îÇ');
  console.log('‚îÇ üéì Estudiante‚îÇ estudiante@test.com  ‚îÇ /estudiante/cursos  ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
  console.log('\nüöÄ Ahora puedes usar estos usuarios para probar el sistema');
  console.log('\nüìù Guarda estas credenciales en: docs/CREDENCIALES.md\n');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error('‚ùå Error:', e);
    await prisma.$disconnect();
    process.exit(1);
  });
