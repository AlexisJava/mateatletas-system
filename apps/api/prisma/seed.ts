import { PrismaClient, TipoProducto, TipoContenido } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Iniciando seed de la base de datos...\n');

  await seedAdmin();
  await seedDocente();
  await seedTutor();
  await seedEquipos();
  await seedRutasCurriculares();
  await seedProductos();
  await seedAccionesPuntuables();
  await seedLogros();
  // await seedEstudiantesConCredenciales(); // TODO: Re-enable after adding email to Estudiante model
  await seedCursoFundamentosAlgebra();
  await seedInscripcionEstudiante();

  console.log('\nüéâ Seed completado exitosamente!');
}

async function seedAdmin() {
  console.log('üë§ Creando/actualizando usuario Admin por defecto...');

  const email = process.env.ADMIN_EMAIL ?? 'admin@mateatletas.com';
  const rawPassword = process.env.ADMIN_PASSWORD ?? 'Admin123!';
  const hashedPassword = await bcrypt.hash(rawPassword, 10);

  await prisma.admin.upsert({
    where: { email },
    update: {},
    create: {
      email,
      password_hash: hashedPassword,
      nombre: process.env.ADMIN_NOMBRE ?? 'Admin',
      apellido: process.env.ADMIN_APELLIDO ?? 'Mateatletas',
    },
  });

  console.log(`‚úÖ Admin listo: ${email}`);
}

async function seedDocente() {
  console.log('\nüë®‚Äçüè´ Creando/actualizando usuario Docente de prueba...');

  const email = 'docente@test.com';
  const rawPassword = 'Test123!';
  const hashedPassword = await bcrypt.hash(rawPassword, 10);

  await prisma.docente.upsert({
    where: { email },
    update: {},
    create: {
      email,
      password_hash: hashedPassword,
      nombre: 'Mar√≠a',
      apellido: 'Gonz√°lez',
      titulo: 'Profesora de Matem√°ticas',
      bio: 'Profesora especializada en √°lgebra y geometr√≠a con m√°s de 5 a√±os de experiencia en educaci√≥n secundaria.',
    },
  });

  console.log(`‚úÖ Docente listo: ${email} (password: ${rawPassword})`);
}

async function seedTutor() {
  console.log('\nüë®‚Äçüë©‚Äçüëß Creando/actualizando usuario Tutor de prueba...');

  const email = 'tutor@test.com';
  const rawPassword = 'Test123!';
  const hashedPassword = await bcrypt.hash(rawPassword, 10);

  await prisma.tutor.upsert({
    where: { email },
    update: {},
    create: {
      email,
      password_hash: hashedPassword,
      nombre: 'Carlos',
      apellido: 'Rodr√≠guez',
      telefono: '+52 55 1234 5678',
    },
  });

  console.log(`‚úÖ Tutor listo: ${email} (password: ${rawPassword})`);
}

async function seedEquipos() {
  console.log('\nüõ°Ô∏è  Creando equipos base...');

  const equipos = [
    {
      nombre: 'F√©nix',
      color_primario: '#FF6B35',
      color_secundario: '#F7B801',
    },
    {
      nombre: 'Drag√≥n',
      color_primario: '#F44336',
      color_secundario: '#9C27B0',
    },
    {
      nombre: 'Tigre',
      color_primario: '#2196F3',
      color_secundario: '#00BCD4',
    },
    {
      nombre: '√Åguila',
      color_primario: '#4CAF50',
      color_secundario: '#8BC34A',
    },
  ];

  for (const equipo of equipos) {
    await prisma.equipo.upsert({
      where: { nombre: equipo.nombre },
      update: {
        color_primario: equipo.color_primario,
        color_secundario: equipo.color_secundario,
      },
      create: equipo,
    });
    console.log(`   ‚Ä¢ ${equipo.nombre}`);
  }

  console.log('‚úÖ Equipos cargados');
}

async function seedRutasCurriculares() {
  console.log('\nüß≠ Creando rutas curriculares...');

  const rutas = [
    {
      id: 'seed-ruta-logica',
      nombre: 'L√≥gica y Razonamiento',
      color: '#8B5CF6',
      descripcion:
        'Desarrollo de pensamiento l√≥gico, resoluci√≥n de problemas y razonamiento abstracto',
    },
    {
      id: 'seed-ruta-algebra',
      nombre: '√Ålgebra',
      color: '#3B82F6',
      descripcion: 'Ecuaciones, sistemas, funciones y expresiones algebraicas',
    },
    {
      id: 'seed-ruta-geometria',
      nombre: 'Geometr√≠a',
      color: '#10B981',
      descripcion:
        'Figuras planas, cuerpos geom√©tricos, trigonometr√≠a y transformaciones',
    },
    {
      id: 'seed-ruta-aritmetica',
      nombre: 'Aritm√©tica',
      color: '#F59E0B',
      descripcion:
        'N√∫meros, operaciones b√°sicas, fracciones, decimales y porcentajes',
    },
    {
      id: 'seed-ruta-estadistica',
      nombre: 'Estad√≠stica y Probabilidad',
      color: '#EF4444',
      descripcion:
        'An√°lisis de datos, gr√°ficos, medidas de tendencia y probabilidad',
    },
    {
      id: 'seed-ruta-calculo',
      nombre: 'C√°lculo',
      color: '#6366F1',
      descripcion: 'L√≠mites, derivadas, integrales y an√°lisis matem√°tico',
    },
  ];

  for (const ruta of rutas) {
    const { id, ...data } = ruta;

    await prisma.rutaCurricular.upsert({
      where: { nombre: ruta.nombre },
      update: data,
      create: { id, ...data },
    });
    console.log(`   ‚Ä¢ ${ruta.nombre}`);
  }

  console.log('‚úÖ Rutas curriculares cargadas');
}

async function seedProductos() {
  console.log('\nüõí Creando productos del cat√°logo...');

  const productos = [
    {
      id: 'seed-suscripcion-mensual',
      nombre: 'Suscripci√≥n Mensual Mateatletas',
      descripcion:
        'Acceso ilimitado a todos los cursos y recursos de la plataforma durante un mes. Incluye clases en vivo, ejercicios interactivos, seguimiento personalizado y sistema de gamificaci√≥n.',
      precio: 2500.0,
      tipo: TipoProducto.Suscripcion,
      activo: true,
      duracion_meses: 1,
    },
    {
      id: 'seed-suscripcion-anual',
      nombre: 'Suscripci√≥n Anual Mateatletas',
      descripcion:
        'Acceso ilimitado por 12 meses con 20% de descuento. Incluye todos los beneficios de la suscripci√≥n mensual m√°s acceso prioritario a nuevos cursos y contenido exclusivo.',
      precio: 24000.0,
      tipo: TipoProducto.Suscripcion,
      activo: true,
      duracion_meses: 12,
    },
    {
      id: 'seed-curso-algebra-basica',
      nombre: 'Curso Intensivo: √Ålgebra B√°sica',
      descripcion:
        'Curso intensivo de 4 semanas para dominar los fundamentos del √°lgebra. Incluye ecuaciones lineales, sistemas de ecuaciones, factorizaci√≥n y funciones lineales. Ideal para estudiantes de secundaria.',
      precio: 3500.0,
      tipo: TipoProducto.Curso,
      activo: true,
      fecha_inicio: new Date('2025-11-15'),
      fecha_fin: new Date('2025-12-13'),
      cupo_maximo: 25,
    },
    {
      id: 'seed-curso-geometria',
      nombre: 'Curso: Geometr√≠a y Trigonometr√≠a',
      descripcion:
        'Aprende geometr√≠a plana y espacial, m√°s introducci√≥n a trigonometr√≠a. Incluye teoremas, construcciones geom√©tricas y aplicaciones pr√°cticas. Duraci√≥n: 6 semanas.',
      precio: 4200.0,
      tipo: TipoProducto.Curso,
      activo: true,
      fecha_inicio: new Date('2025-12-01'),
      fecha_fin: new Date('2026-01-12'),
      cupo_maximo: 20,
    },
    {
      id: 'seed-recurso-guia-ejercicios',
      nombre: 'Gu√≠a Completa de Ejercicios - Matem√°tica Nivel Secundaria',
      descripcion:
        'Colecci√≥n digital de m√°s de 500 ejercicios resueltos y explicados paso a paso. Incluye todos los temas de matem√°tica de nivel secundario.',
      precio: 1500.0,
      tipo: TipoProducto.RecursoDigital,
      activo: true,
    },
  ];

  for (const producto of productos) {
    const { id, ...data } = producto;
    await prisma.producto.upsert({
      where: { id },
      update: data,
      create: { id, ...data },
    });
    console.log(`   ‚Ä¢ ${producto.nombre}`);
  }

  console.log('‚úÖ Productos del cat√°logo listos');
}

async function seedAccionesPuntuables() {
  console.log('\n‚≠ê Creando acciones puntuables...');

  const acciones = [
    {
      nombre: 'Asistencia a clase',
      descripcion: 'El estudiante asisti√≥ puntualmente a una clase programada',
      puntos: 10,
    },
    {
      nombre: 'Participaci√≥n activa',
      descripcion:
        'El estudiante particip√≥ activamente durante la clase, respondiendo preguntas o haciendo consultas',
      puntos: 15,
    },
    {
      nombre: 'Ejercicios completados',
      descripcion:
        'El estudiante complet√≥ todos los ejercicios asignados durante la clase',
      puntos: 20,
    },
    {
      nombre: 'Ayud√≥ a un compa√±ero',
      descripcion:
        'El estudiante ayud√≥ a explicar un concepto a otro compa√±ero durante la clase',
      puntos: 25,
    },
    {
      nombre: 'Excelencia en ejercicios',
      descripcion:
        'El estudiante complet√≥ todos los ejercicios sin errores y de forma destacada',
      puntos: 30,
    },
    {
      nombre: 'Racha semanal',
      descripcion:
        'El estudiante asisti√≥ a todas las clases de la semana sin faltas',
      puntos: 50,
    },
    {
      nombre: 'Desaf√≠o superado',
      descripcion:
        'El estudiante complet√≥ exitosamente un desaf√≠o matem√°tico adicional',
      puntos: 40,
    },
    {
      nombre: 'Mejora destacada',
      descripcion:
        'El estudiante mostr√≥ una mejora significativa en su desempe√±o respecto a clases anteriores',
      puntos: 35,
    },
  ];

  for (const accion of acciones) {
    await prisma.accionPuntuable.upsert({
      where: { nombre: accion.nombre },
      update: {
        descripcion: accion.descripcion,
        puntos: accion.puntos,
      },
      create: accion,
    });
    console.log(`   ‚Ä¢ ${accion.nombre} (${accion.puntos} pts)`);
  }

  console.log('‚úÖ Acciones puntuables cargadas');
}

async function seedLogros() {
  console.log('\nüèÜ Creando logros (achievements)...');

  const logros = [
    {
      nombre: 'Primera Clase',
      descripcion: 'Asististe a tu primera clase en Mateatletas',
      icono: 'üéì',
      puntos: 50,
      requisito: 'Asistir a 1 clase',
    },
    {
      nombre: 'Racha de Fuego',
      descripcion: 'Asististe a 5 clases consecutivas sin faltar',
      icono: 'üî•',
      puntos: 200,
      requisito: 'Asistir a 5 clases consecutivas',
    },
    {
      nombre: 'Matem√°tico Dedicado',
      descripcion: 'Acumulaste 500 puntos totales',
      icono: 'üìö',
      puntos: 100,
      requisito: 'Alcanzar 500 puntos totales',
    },
    {
      nombre: 'Estrella Brillante',
      descripcion: 'Alcanzaste el nivel 5',
      icono: '‚≠ê',
      puntos: 150,
      requisito: 'Alcanzar nivel 5',
    },
    {
      nombre: 'Leyenda Matem√°tica',
      descripcion: 'Alcanzaste el nivel 10',
      icono: 'üëë',
      puntos: 300,
      requisito: 'Alcanzar nivel 10',
    },
    {
      nombre: 'Maestro de Equipo',
      descripcion: 'Tu equipo alcanz√≥ el primer lugar en el ranking',
      icono: 'üèÜ',
      puntos: 250,
      requisito: 'Equipo en primer lugar del ranking',
    },
    {
      nombre: 'Colaborador',
      descripcion: 'Ayudaste a 10 compa√±eros durante las clases',
      icono: 'ü§ù',
      puntos: 180,
      requisito: 'Ayudar a 10 compa√±eros',
    },
    {
      nombre: 'Perfeccionista',
      descripcion: 'Completaste 20 ejercicios sin errores',
      icono: 'üíØ',
      puntos: 220,
      requisito: 'Completar 20 ejercicios perfectos',
    },
  ];

  for (const logro of logros) {
    await prisma.logro.upsert({
      where: { nombre: logro.nombre },
      update: {
        descripcion: logro.descripcion,
        icono: logro.icono,
        puntos: logro.puntos,
        requisito: logro.requisito,
      },
      create: logro,
    });
    console.log(`   ‚Ä¢ ${logro.icono} ${logro.nombre} (${logro.puntos} pts)`);
  }

  console.log('‚úÖ Logros cargados');
}

async function seedEstudiantesConCredenciales() {
  console.log('\nüë¶ Actualizando estudiantes con credenciales...');

  // Obtener todos los estudiantes existentes sin email
  const estudiantesSinEmail = await prisma.estudiante.findMany({
    where: { email: null },
    take: 5, // Actualizar m√°ximo 5
  });

  if (estudiantesSinEmail.length === 0) {
    console.log('  ‚ÑπÔ∏è  No hay estudiantes sin email para actualizar');
    return;
  }

  const password = 'estudiante123'; // Contrase√±a por defecto para testing
  const passwordHash = await bcrypt.hash(password, 10);

  let actualizados = 0;

  for (const [index, estudiante] of estudiantesSinEmail.entries()) {
    const email = `estudiante${index + 1}@test.com`;

    try {
      // Verificar si el email ya existe
      const emailExiste = await prisma.estudiante.findUnique({
        where: { email },
      });

      if (!emailExiste) {
        await prisma.estudiante.update({
          where: { id: estudiante.id },
          data: {
            email,
            password_hash: passwordHash,
          },
        });

        console.log(
          `   ‚úÖ ${estudiante.nombre} ${estudiante.apellido} ‚Üí ${email}`,
        );
        actualizados++;
      } else {
        console.log(
          `   ‚è≠Ô∏è  ${estudiante.nombre} ${estudiante.apellido} ‚Üí email ya existe, saltando`,
        );
      }
    } catch (error) {
      console.log(
        `   ‚ö†Ô∏è  Error actualizando ${estudiante.nombre}: ${error instanceof Error ? error.message : 'unknown'}`,
      );
    }
  }

  if (actualizados > 0) {
    console.log(`‚úÖ ${actualizados} estudiantes actualizados con credenciales`);
    console.log(`   üìß Email: estudiante1@test.com ... estudiante${actualizados}@test.com`);
    console.log(`   üîë Password: ${password}`);
  } else {
    console.log('  ‚ÑπÔ∏è  No se actualizaron estudiantes (emails ya existen)');
  }
}

/**
 * SLICE #16: Seed de Curso Completo con Ed-Tech Best Practices
 *
 * Curso: "Fundamentos de √Ålgebra"
 * - 3 m√≥dulos tem√°ticos (Chunking)
 * - 10 lecciones totales (Microlearning: 5-15 min cada una)
 * - Multiple content types (Multi-modal Learning)
 * - Sequential unlocking (Progressive Disclosure)
 * - Gamification (points + achievements)
 */
async function seedCursoFundamentosAlgebra() {
  console.log('\nüìö Creando curso completo: Fundamentos de √Ålgebra...');

  // Verificar que existe el producto del curso
  const producto = await prisma.producto.findUnique({
    where: { id: 'seed-curso-algebra-basica' },
  });

  if (!producto) {
    console.log('   ‚ö†Ô∏è  Producto "√Ålgebra B√°sica" no encontrado, saltando...');
    return;
  }

  // Obtener un logro para vincular a lecciones especiales
  const logro = await prisma.logro.findFirst({
    where: { nombre: 'Primera Clase' },
  });

  console.log('   üì¶ Creando m√≥dulos y lecciones...\n');

  // ========================================
  // M√ìDULO 1: Variables y Expresiones
  // ========================================
  const modulo1 = await prisma.modulo.upsert({
    where: { id: 'seed-modulo-variables' },
    update: {},
    create: {
      id: 'seed-modulo-variables',
      producto_id: producto.id,
      titulo: 'Variables y Expresiones Algebraicas',
      descripcion:
        'Introducci√≥n a los conceptos fundamentales del √°lgebra: variables, t√©rminos, coeficientes y expresiones algebraicas.',
      orden: 1,
      duracion_estimada_minutos: 45, // 3 lecciones x 15 min
      puntos_totales: 40, // Calculado autom√°ticamente
      publicado: true,
    },
  });
  console.log(`   ‚úÖ M√≥dulo 1: ${modulo1.titulo}`);

  // Lecci√≥n 1.1 - Video introductorio (sin prerequisito)
  const leccion1_1 = await prisma.leccion.upsert({
    where: { id: 'seed-leccion-1-1' },
    update: {},
    create: {
      id: 'seed-leccion-1-1',
      modulo_id: modulo1.id,
      titulo: '¬øQu√© es el √Ålgebra?',
      descripcion:
        'Video introductorio que explica qu√© es el √°lgebra, su historia y por qu√© es importante aprenderla.',
      tipo_contenido: TipoContenido.Video,
      contenido: JSON.stringify({
        video_url: 'https://www.youtube.com/watch?v=example-algebra-intro',
        duracion: '12:30',
        subtitulos: true,
      }),
      orden: 1,
      puntos_por_completar: 10,
      logro_desbloqueable_id: logro?.id,
      duracion_estimada_minutos: 15,
      activo: true,
      recursos_adicionales: JSON.stringify({
        links: [
          'https://es.wikipedia.org/wiki/√Ålgebra',
          'https://www.khanacademy.org/math/algebra',
        ],
      }),
    },
  });
  console.log(`      ‚Ä¢ ${leccion1_1.titulo} (Video, 10 pts)`);

  // Lecci√≥n 1.2 - Texto explicativo (prerequisito: 1.1)
  const leccion1_2 = await prisma.leccion.upsert({
    where: { id: 'seed-leccion-1-2' },
    update: {},
    create: {
      id: 'seed-leccion-1-2',
      modulo_id: modulo1.id,
      titulo: 'Variables: Las Inc√≥gnitas del √Ålgebra',
      descripcion:
        'Aprende qu√© son las variables, c√≥mo se representan y su rol en las expresiones algebraicas.',
      tipo_contenido: TipoContenido.Texto,
      contenido: `# Variables: Las Inc√≥gnitas del √Ålgebra

## ¬øQu√© es una variable?

Una **variable** es un s√≠mbolo (generalmente una letra) que representa un valor desconocido o que puede cambiar.

### Ejemplos:
- **x** = n√∫mero de manzanas en una caja
- **y** = edad de una persona
- **z** = temperatura en grados Celsius

## ¬øPor qu√© usar variables?

Las variables nos permiten:
1. Representar valores desconocidos
2. Generalizar problemas matem√°ticos
3. Crear f√≥rmulas y ecuaciones

## Expresiones Algebraicas

Una **expresi√≥n algebraica** combina variables, n√∫meros y operaciones.

### Ejemplos:
- \`3x + 5\`
- \`2y - 7\`
- \`x¬≤ + 4x + 4\`

## T√©rminos y Coeficientes

En la expresi√≥n \`5x + 3\`:
- **5x** es un t√©rmino (variable con coeficiente)
- **5** es el coeficiente de x
- **3** es un t√©rmino constante

## Pr√°ctica

Identifica las variables en estas expresiones:
1. \`7a + 2b\`
2. \`m¬≤ - 5m + 6\`
3. \`3xy + 2x - y\``,
      orden: 2,
      puntos_por_completar: 15,
      duracion_estimada_minutos: 12,
      activo: true,
      leccion_prerequisito_id: leccion1_1.id, // Progressive Disclosure
    },
  });
  console.log(
    `      ‚Ä¢ ${leccion1_2.titulo} (Texto, 15 pts) [Prerequisito: 1.1]`,
  );

  // Lecci√≥n 1.3 - Quiz (prerequisito: 1.2)
  const leccion1_3 = await prisma.leccion.upsert({
    where: { id: 'seed-leccion-1-3' },
    update: {},
    create: {
      id: 'seed-leccion-1-3',
      modulo_id: modulo1.id,
      titulo: 'Quiz: Variables y Expresiones',
      descripcion: 'Pon a prueba tu comprensi√≥n de variables y expresiones.',
      tipo_contenido: TipoContenido.Quiz,
      contenido: JSON.stringify({
        preguntas: [
          {
            id: 1,
            pregunta: '¬øQu√© es una variable en √°lgebra?',
            opciones: [
              'Un n√∫mero que nunca cambia',
              'Un s√≠mbolo que representa un valor desconocido',
              'Una operaci√≥n matem√°tica',
              'Un tipo de ecuaci√≥n',
            ],
            respuesta_correcta: 1, // √≠ndice 1 = segunda opci√≥n
            explicacion:
              'Las variables son s√≠mbolos que representan valores desconocidos o que pueden cambiar.',
          },
          {
            id: 2,
            pregunta: 'En la expresi√≥n 7x + 3, ¬øcu√°l es el coeficiente de x?',
            opciones: ['x', '7', '3', '10'],
            respuesta_correcta: 1,
            explicacion: 'El coeficiente es el n√∫mero que multiplica a la variable.',
          },
          {
            id: 3,
            pregunta: '¬øCu√°l de estas es una expresi√≥n algebraica?',
            opciones: ['5 + 3 = 8', '2x - 7', 'x = 4', '10'],
            respuesta_correcta: 1,
            explicacion:
              'Una expresi√≥n algebraica combina variables y n√∫meros sin un signo igual.',
          },
        ],
      }),
      orden: 3,
      puntos_por_completar: 15,
      duracion_estimada_minutos: 10,
      activo: true,
      leccion_prerequisito_id: leccion1_2.id,
    },
  });
  console.log(`      ‚Ä¢ ${leccion1_3.titulo} (Quiz, 15 pts) [Prerequisito: 1.2]`);

  // ========================================
  // M√ìDULO 2: Ecuaciones Lineales
  // ========================================
  const modulo2 = await prisma.modulo.upsert({
    where: { id: 'seed-modulo-ecuaciones' },
    update: {},
    create: {
      id: 'seed-modulo-ecuaciones',
      producto_id: producto.id,
      titulo: 'Ecuaciones Lineales',
      descripcion:
        'Aprende a resolver ecuaciones lineales simples y complejas paso a paso.',
      orden: 2,
      duracion_estimada_minutos: 60, // 4 lecciones
      puntos_totales: 65,
      publicado: true,
    },
  });
  console.log(`\n   ‚úÖ M√≥dulo 2: ${modulo2.titulo}`);

  // Lecci√≥n 2.1 - Video (sin prerequisito del m√≥dulo anterior por ahora)
  const leccion2_1 = await prisma.leccion.upsert({
    where: { id: 'seed-leccion-2-1' },
    update: {},
    create: {
      id: 'seed-leccion-2-1',
      modulo_id: modulo2.id,
      titulo: 'Introducci√≥n a las Ecuaciones',
      descripcion: 'Descubre qu√© es una ecuaci√≥n y c√≥mo se diferencia de una expresi√≥n.',
      tipo_contenido: TipoContenido.Video,
      contenido: JSON.stringify({
        video_url: 'https://www.youtube.com/watch?v=example-equations',
        duracion: '14:20',
        subtitulos: true,
      }),
      orden: 1,
      puntos_por_completar: 10,
      duracion_estimada_minutos: 15,
      activo: true,
    },
  });
  console.log(`      ‚Ä¢ ${leccion2_1.titulo} (Video, 10 pts)`);

  // Lecci√≥n 2.2 - Texto explicativo
  const leccion2_2 = await prisma.leccion.upsert({
    where: { id: 'seed-leccion-2-2' },
    update: {},
    create: {
      id: 'seed-leccion-2-2',
      modulo_id: modulo2.id,
      titulo: 'Resolver Ecuaciones de un Paso',
      descripcion: 'Aprende a resolver ecuaciones simples como x + 5 = 12.',
      tipo_contenido: TipoContenido.Texto,
      contenido: `# Resolver Ecuaciones de un Paso

## ¬øQu√© es una ecuaci√≥n?

Una **ecuaci√≥n** es una igualdad matem√°tica que contiene una o m√°s variables.

Ejemplo: \`x + 5 = 12\`

## Objetivo: Aislar la variable

Para resolver una ecuaci√≥n, debemos **aislar la variable** en un lado del signo igual.

### Regla de Oro
> Lo que hagas de un lado, hazlo tambi√©n del otro.

## Ejemplo 1: Suma/Resta

Resolver: \`x + 5 = 12\`

**Paso 1**: Identificar la operaci√≥n que afecta a x ‚Üí suma (+5)

**Paso 2**: Hacer la operaci√≥n inversa en ambos lados ‚Üí restar 5

\`\`\`
x + 5 = 12
x + 5 - 5 = 12 - 5
x = 7
\`\`\`

**Verificaci√≥n**: 7 + 5 = 12 ‚úÖ

## Ejemplo 2: Multiplicaci√≥n/Divisi√≥n

Resolver: \`3x = 15\`

**Paso 1**: Identificar la operaci√≥n ‚Üí multiplicaci√≥n (√ó3)

**Paso 2**: Hacer la operaci√≥n inversa ‚Üí dividir entre 3

\`\`\`
3x = 15
3x √∑ 3 = 15 √∑ 3
x = 5
\`\`\`

**Verificaci√≥n**: 3 √ó 5 = 15 ‚úÖ

## Practica

Resuelve estas ecuaciones:
1. \`x + 8 = 20\`
2. \`y - 3 = 10\`
3. \`4m = 28\`
4. \`z √∑ 2 = 9\``,
      orden: 2,
      puntos_por_completar: 15,
      duracion_estimada_minutos: 15,
      activo: true,
      leccion_prerequisito_id: leccion2_1.id,
    },
  });
  console.log(
    `      ‚Ä¢ ${leccion2_2.titulo} (Texto, 15 pts) [Prerequisito: 2.1]`,
  );

  // Lecci√≥n 2.3 - Pr√°ctica interactiva
  const leccion2_3 = await prisma.leccion.upsert({
    where: { id: 'seed-leccion-2-3' },
    update: {},
    create: {
      id: 'seed-leccion-2-3',
      modulo_id: modulo2.id,
      titulo: 'Pr√°ctica: Ecuaciones de Dos Pasos',
      descripcion: 'Resuelve ecuaciones que requieren dos operaciones.',
      tipo_contenido: TipoContenido.Practica,
      contenido: JSON.stringify({
        ejercicios: [
          {
            id: 1,
            problema: '2x + 3 = 11',
            pasos: [
              'Restar 3 de ambos lados: 2x = 8',
              'Dividir ambos lados entre 2: x = 4',
            ],
            respuesta: 4,
            dificultad: 'f√°cil',
          },
          {
            id: 2,
            problema: '5y - 7 = 18',
            pasos: [
              'Sumar 7 a ambos lados: 5y = 25',
              'Dividir ambos lados entre 5: y = 5',
            ],
            respuesta: 5,
            dificultad: 'f√°cil',
          },
          {
            id: 3,
            problema: '3(m + 2) = 21',
            pasos: [
              'Dividir ambos lados entre 3: m + 2 = 7',
              'Restar 2 de ambos lados: m = 5',
            ],
            respuesta: 5,
            dificultad: 'medio',
          },
        ],
      }),
      orden: 3,
      puntos_por_completar: 20,
      duracion_estimada_minutos: 15,
      activo: true,
      leccion_prerequisito_id: leccion2_2.id,
    },
  });
  console.log(
    `      ‚Ä¢ ${leccion2_3.titulo} (Pr√°ctica, 20 pts) [Prerequisito: 2.2]`,
  );

  // Lecci√≥n 2.4 - Quiz final del m√≥dulo
  const leccion2_4 = await prisma.leccion.upsert({
    where: { id: 'seed-leccion-2-4' },
    update: {},
    create: {
      id: 'seed-leccion-2-4',
      modulo_id: modulo2.id,
      titulo: 'Quiz: Ecuaciones Lineales',
      descripcion: 'Evaluaci√≥n final del m√≥dulo de ecuaciones.',
      tipo_contenido: TipoContenido.Quiz,
      contenido: JSON.stringify({
        preguntas: [
          {
            id: 1,
            pregunta: '¬øCu√°l es la soluci√≥n de x + 9 = 15?',
            opciones: ['x = 6', 'x = 24', 'x = 9', 'x = -6'],
            respuesta_correcta: 0,
            explicacion: 'x = 15 - 9 = 6',
          },
          {
            id: 2,
            pregunta: 'Resuelve: 4x = 32',
            opciones: ['x = 8', 'x = 28', 'x = 128', 'x = 4'],
            respuesta_correcta: 0,
            explicacion: 'x = 32 √∑ 4 = 8',
          },
          {
            id: 3,
            pregunta: 'Resuelve: 2x + 5 = 17',
            opciones: ['x = 6', 'x = 11', 'x = 12', 'x = 8.5'],
            respuesta_correcta: 0,
            explicacion: '2x = 17 - 5 = 12, entonces x = 12 √∑ 2 = 6',
          },
          {
            id: 4,
            pregunta: '¬øQu√© operaci√≥n es inversa a la multiplicaci√≥n?',
            opciones: ['Divisi√≥n', 'Suma', 'Resta', 'Potenciaci√≥n'],
            respuesta_correcta: 0,
            explicacion: 'La divisi√≥n es la operaci√≥n inversa de la multiplicaci√≥n.',
          },
        ],
      }),
      orden: 4,
      puntos_por_completar: 20,
      duracion_estimada_minutos: 15,
      activo: true,
      leccion_prerequisito_id: leccion2_3.id,
    },
  });
  console.log(
    `      ‚Ä¢ ${leccion2_4.titulo} (Quiz, 20 pts) [Prerequisito: 2.3]`,
  );

  // ========================================
  // M√ìDULO 3: Sistemas de Ecuaciones
  // ========================================
  const modulo3 = await prisma.modulo.upsert({
    where: { id: 'seed-modulo-sistemas' },
    update: {},
    create: {
      id: 'seed-modulo-sistemas',
      producto_id: producto.id,
      titulo: 'Sistemas de Ecuaciones',
      descripcion:
        'Aprende a resolver sistemas de ecuaciones lineales con dos variables usando diferentes m√©todos.',
      orden: 3,
      duracion_estimada_minutos: 45, // 3 lecciones
      puntos_totales: 60,
      publicado: true,
    },
  });
  console.log(`\n   ‚úÖ M√≥dulo 3: ${modulo3.titulo}`);

  // Lecci√≥n 3.1 - Video introducci√≥n
  const leccion3_1 = await prisma.leccion.upsert({
    where: { id: 'seed-leccion-3-1' },
    update: {},
    create: {
      id: 'seed-leccion-3-1',
      modulo_id: modulo3.id,
      titulo: '¬øQu√© son los Sistemas de Ecuaciones?',
      descripcion:
        'Introducci√≥n a sistemas de ecuaciones lineales y sus aplicaciones.',
      tipo_contenido: TipoContenido.Video,
      contenido: JSON.stringify({
        video_url: 'https://www.youtube.com/watch?v=example-systems',
        duracion: '13:45',
        subtitulos: true,
      }),
      orden: 1,
      puntos_por_completar: 15,
      duracion_estimada_minutos: 15,
      activo: true,
    },
  });
  console.log(`      ‚Ä¢ ${leccion3_1.titulo} (Video, 15 pts)`);

  // Lecci√≥n 3.2 - Texto: M√©todo de sustituci√≥n
  const leccion3_2 = await prisma.leccion.upsert({
    where: { id: 'seed-leccion-3-2' },
    update: {},
    create: {
      id: 'seed-leccion-3-2',
      modulo_id: modulo3.id,
      titulo: 'M√©todo de Sustituci√≥n',
      descripcion: 'Aprende a resolver sistemas usando el m√©todo de sustituci√≥n.',
      tipo_contenido: TipoContenido.Texto,
      contenido: `# M√©todo de Sustituci√≥n

## ¬øQu√© es un sistema de ecuaciones?

Un **sistema de ecuaciones** es un conjunto de dos o m√°s ecuaciones con las mismas variables.

Ejemplo:
\`\`\`
x + y = 10
x - y = 4
\`\`\`

## M√©todo de Sustituci√≥n

### Pasos:
1. **Despejar** una variable en una ecuaci√≥n
2. **Sustituir** esa expresi√≥n en la otra ecuaci√≥n
3. **Resolver** para encontrar una variable
4. **Sustituir de nuevo** para encontrar la otra variable

## Ejemplo Completo

Resolver:
\`\`\`
y = 2x + 1  ... (1)
x + y = 7   ... (2)
\`\`\`

**Paso 1**: Ya tenemos y despejada en (1): \`y = 2x + 1\`

**Paso 2**: Sustituir en (2):
\`\`\`
x + (2x + 1) = 7
\`\`\`

**Paso 3**: Resolver:
\`\`\`
3x + 1 = 7
3x = 6
x = 2
\`\`\`

**Paso 4**: Sustituir x = 2 en (1):
\`\`\`
y = 2(2) + 1
y = 5
\`\`\`

**Soluci√≥n**: x = 2, y = 5

**Verificaci√≥n** en (2): 2 + 5 = 7 ‚úÖ

## Practica

Resuelve usando sustituci√≥n:
\`\`\`
y = x + 3
2x + y = 12
\`\`\``,
      orden: 2,
      puntos_por_completar: 20,
      duracion_estimada_minutos: 15,
      activo: true,
      leccion_prerequisito_id: leccion3_1.id,
    },
  });
  console.log(
    `      ‚Ä¢ ${leccion3_2.titulo} (Texto, 20 pts) [Prerequisito: 3.1]`,
  );

  // Lecci√≥n 3.3 - Tarea final
  const leccion3_3 = await prisma.leccion.upsert({
    where: { id: 'seed-leccion-3-3' },
    update: {},
    create: {
      id: 'seed-leccion-3-3',
      modulo_id: modulo3.id,
      titulo: 'Tarea: Problemas del Mundo Real',
      descripcion:
        'Aplica lo aprendido resolviendo problemas contextualizados con sistemas de ecuaciones.',
      tipo_contenido: TipoContenido.Tarea,
      contenido: JSON.stringify({
        problemas: [
          {
            id: 1,
            enunciado:
              'En una tienda, Mar√≠a compr√≥ 3 cuadernos y 2 l√°pices por $45. Su amigo Carlos compr√≥ 2 cuadernos y 3 l√°pices por $40. ¬øCu√°nto cuesta cada art√≠culo?',
            variables: {
              x: 'precio de un cuaderno',
              y: 'precio de un l√°piz',
            },
            ecuaciones: ['3x + 2y = 45', '2x + 3y = 40'],
            solucion: { x: 11, y: 6 },
            explicacion:
              'Un cuaderno cuesta $11 y un l√°piz cuesta $6. Verificaci√≥n: 3(11) + 2(6) = 33 + 12 = 45 ‚úÖ',
          },
          {
            id: 2,
            enunciado:
              'Un rect√°ngulo tiene un per√≠metro de 40 metros. El largo es el doble del ancho. ¬øCu√°les son las dimensiones del rect√°ngulo?',
            variables: {
              l: 'largo del rect√°ngulo',
              a: 'ancho del rect√°ngulo',
            },
            ecuaciones: ['2l + 2a = 40', 'l = 2a'],
            solucion: { l: 13.33, a: 6.67 },
            explicacion:
              'El largo es aproximadamente 13.33 metros y el ancho es aproximadamente 6.67 metros.',
          },
        ],
        fecha_entrega: '2025-11-22',
        instrucciones:
          'Resuelve cada problema mostrando todos los pasos: definici√≥n de variables, planteamiento de ecuaciones, m√©todo de soluci√≥n y verificaci√≥n.',
      }),
      orden: 3,
      puntos_por_completar: 25,
      duracion_estimada_minutos: 20,
      activo: true,
      leccion_prerequisito_id: leccion3_2.id,
    },
  });
  console.log(
    `      ‚Ä¢ ${leccion3_3.titulo} (Tarea, 25 pts) [Prerequisito: 3.2]`,
  );

  // Recalcular puntos de cada m√≥dulo (suma de puntos de lecciones)
  await recalcularPuntosTodos();

  console.log('\n‚úÖ Curso "Fundamentos de √Ålgebra" creado exitosamente!');
  console.log('   üìä Resumen:');
  console.log('      ‚Ä¢ 3 m√≥dulos tem√°ticos');
  console.log('      ‚Ä¢ 10 lecciones con Progressive Disclosure');
  console.log('      ‚Ä¢ Tipos de contenido: Video, Texto, Quiz, Pr√°ctica, Tarea');
  console.log('      ‚Ä¢ Puntos totales del curso: ~145 pts');
  console.log('      ‚Ä¢ Duraci√≥n estimada total: ~2.5 horas');
}

/**
 * Inscribe al estudiante1 de prueba al curso de √Ålgebra
 * para permitir testing del endpoint de completar lecciones
 */
async function seedInscripcionEstudiante() {
  console.log('\nüìù Inscribiendo estudiante1 al curso de √Ålgebra...');

  const estudiante = await prisma.estudiante.findUnique({
    where: { email: 'estudiante1@test.com' },
  });

  const producto = await prisma.producto.findUnique({
    where: { id: 'seed-curso-algebra-basica' },
  });

  if (!estudiante || !producto) {
    console.log('   ‚ö†Ô∏è  Estudiante o producto no encontrado, saltando...');
    return;
  }

  await prisma.inscripcionCurso.upsert({
    where: {
      estudiante_id_producto_id: {
        estudiante_id: estudiante.id,
        producto_id: producto.id,
      },
    },
    update: {},
    create: {
      estudiante_id: estudiante.id,
      producto_id: producto.id,
      estado: 'Activo',
      fecha_inscripcion: new Date(),
    },
  });

  console.log('   ‚úÖ Estudiante1 inscrito en el curso de √Ålgebra');
}

/**
 * Recalcula los puntos totales de todos los m√≥dulos
 * bas√°ndose en la suma de puntos de sus lecciones
 */
async function recalcularPuntosTodos() {
  const modulos = await prisma.modulo.findMany({
    include: {
      lecciones: {
        where: { activo: true },
      },
    },
  });

  for (const modulo of modulos) {
    const puntosTotal = modulo.lecciones.reduce(
      (sum, leccion) => sum + leccion.puntos_por_completar,
      0,
    );

    const duracionTotal = modulo.lecciones.reduce(
      (sum, leccion) => sum + (leccion.duracion_estimada_minutos || 0),
      0,
    );

    await prisma.modulo.update({
      where: { id: modulo.id },
      data: {
        puntos_totales: puntosTotal,
        duracion_estimada_minutos: duracionTotal,
      },
    });
  }
}

main()
  .catch((error) => {
    console.error('‚ùå Error ejecutando seed:', error);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
