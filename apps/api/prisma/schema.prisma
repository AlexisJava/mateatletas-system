generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TestModel {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())

  @@map("test_models")
}

/// Modelo principal para tutores/docentes de la plataforma
/// Representa a los usuarios educadores que crean y gestionan contenido educativo
model Tutor {
  /// Identificador único del tutor (CUID para mejor distribución)
  id                        String                  @id @default(cuid())
  /// Username único del tutor - usado para autenticación alternativa
  username                  String?                 @unique
  /// Email único del tutor - usado para autenticación
  /// IMPORTANTE: Debe estar indexado para búsquedas rápidas en login
  email                     String?                 @unique
  /// Hash bcrypt de la contraseña - NUNCA se envía al frontend
  /// Se maneja solo en backend para seguridad
  password_hash             String
  /// Password temporal en texto plano - se muestra al admin al crear el tutor
  /// Se borra después del primer cambio de contraseña
  password_temporal         String?
  /// Indica si el tutor debe cambiar su contraseña en el próximo login
  debe_cambiar_password     Boolean                 @default(true)
  /// Indica si el tutor debe completar su perfil (datos personales adicionales)
  debe_completar_perfil     Boolean                 @default(false)
  /// Fecha del último cambio de contraseña
  fecha_ultimo_cambio       DateTime?
  /// Nombre del tutor
  nombre                    String
  /// Apellido del tutor
  apellido                  String
  /// Documento Nacional de Identidad (opcional)
  dni                       String?
  /// Teléfono de contacto (opcional)
  telefono                  String?
  /// Fecha en que el tutor se registró en la plataforma
  fecha_registro            DateTime                @default(now())
  /// Indica si el tutor completó el proceso de onboarding inicial
  /// Se usa para redirigir a nuevos tutores al flujo de configuración
  ha_completado_onboarding  Boolean                 @default(false)
  /// Timestamp de creación del registro
  createdAt                 DateTime                @default(now())
  /// Timestamp de última actualización del registro
  updatedAt                 DateTime                @updatedAt
  /// Roles asignados al tutor (normalmente solo ["tutor"])
  /// Ejemplo: ["tutor"]
  roles                     Json                    @default("[\"tutor\"]")
  estudiantes               Estudiante[]
  inscripciones_clase       InscripcionClase[]
  inscripciones_clase_grupo InscripcionClaseGrupo[]
  membresias                Membresia[]
  inscripciones_mensuales   InscripcionMensual[]

  @@map("tutores")
}

/// Modelo para estudiantes asociados a un tutor
/// Representa a los alumnos que utilizarán la plataforma
model Estudiante {
  /// Identificador único del estudiante
  id                        String                            @id @default(cuid())
  /// Username único del estudiante - usado para autenticación
  username                  String?                           @unique
  /// Nombre del estudiante
  nombre                    String
  /// Apellido del estudiante
  apellido                  String
  /// Nivel escolar del estudiante: Primaria, Secundaria, Universidad
  nivel_escolar             String
  /// URL del avatar 3D de Ready Player Me
  /// Ejemplo: https://models.readyplayer.me/abc123.glb
  avatar_url                String?                           @db.Text
  /// DEPRECADO: URL de la foto de perfil del estudiante (mantener por compatibilidad)
  foto_url                  String?
  /// ID del tutor que gestiona este estudiante
  tutor_id                  String
  /// ID del equipo al que pertenece el estudiante (opcional, para gamificación)
  equipo_id                 String?
  /// Puntos totales acumulados por el estudiante (gamificación)
  puntos_totales            Int                               @default(0)
  /// Nivel actual del estudiante en el sistema de gamificación
  nivel_actual              Int                               @default(1)
  /// Timestamp de creación del registro
  createdAt                 DateTime                          @default(now())
  /// Timestamp de última actualización del registro
  updatedAt                 DateTime                          @updatedAt
  /// ID del gradiente del avatar (0-9)
  /// Corresponde a uno de los 10 gradientes predefinidos del sistema
  avatar_gradient           Int                               @default(0)
  /// Edad del estudiante en años
  edad                      Int
  /// Email único del estudiante - usado para autenticación propia
  /// IMPORTANTE: Debe estar indexado para búsquedas rápidas en login
  email                     String?                           @unique
  /// Hash bcrypt de la contraseña - NUNCA se envía al frontend
  /// Permite que el estudiante acceda al portal con sus propias credenciales
  password_hash             String?
  /// PIN temporal en texto plano - se muestra al tutor/admin al crear el estudiante
  /// Se borra después del primer cambio de contraseña
  password_temporal         String?
  /// Indica si el estudiante debe cambiar su PIN en el próximo login
  debe_cambiar_password     Boolean                           @default(true)
  /// Fecha del último cambio de contraseña
  fecha_ultimo_cambio       DateTime?
  /// Roles asignados al estudiante (normalmente solo ["estudiante"])
  /// Ejemplo: ["estudiante"]
  roles                     Json                              @default("[\"estudiante\"]")
  /// DEPRECADO: ID del sector al que pertenece el estudiante (usar sectores[] en su lugar)
  /// Mantener temporalmente para migración gradual
  sector_id                 String?
  alertas                   Alerta[]
  asistencias               Asistencia[]
  equipo                    Equipo?                           @relation(fields: [equipo_id], references: [id])
  /// DEPRECADO: Relación uno-a-uno con sector (usar sectores[] en su lugar)
  sector                    Sector?                           @relation("EstudianteSectorLegacy", fields: [sector_id], references: [id])
  /// NUEVO: Relación muchos-a-muchos con sectores a través de EstudianteSector
  sectores                  EstudianteSector[]
  tutor                     Tutor                             @relation(fields: [tutor_id], references: [id], onDelete: Cascade)
  inscripciones_clase       InscripcionClase[]
  inscripciones_clase_grupo InscripcionClaseGrupo[]
  asistencias_clase_grupo   AsistenciaClaseGrupo[]
  inscripciones_curso       InscripcionCurso[]
  logrosDesbloqueados       LogroDesbloqueado[]
  progresoLecciones         ProgresoLeccion[]
  puntosObtenidos           PuntoObtenido[]
  inscripciones_mensuales   InscripcionMensual[]
  becas                     Beca[]
  progresosActividades      ProgresoEstudianteActividad[]
  progresosPlanificaciones  ProgresoEstudiantePlanificacion[]
  recursos                  RecursosEstudiante?
  itemsObtenidos            ItemObtenido[]

  @@map("estudiantes")
}

/// Tabla intermedia para relación muchos-a-muchos entre Estudiante y Sector
/// Un estudiante puede estar inscrito en múltiples sectores (ej: Matemática + Programación)
/// Un sector puede tener múltiples estudiantes
model EstudianteSector {
  /// ID único de la relación
  id            String    @id @default(cuid())
  /// ID del estudiante
  estudiante_id String
  /// ID del sector
  sector_id     String
  /// Indica si es el sector principal del estudiante (para compatibilidad con lógica legacy)
  es_principal  Boolean   @default(false)
  /// Fecha de inscripción en el sector
  fecha_inicio  DateTime  @default(now())
  /// Fecha de baja del sector (null si está activo)
  fecha_fin     DateTime?
  /// Timestamp de creación del registro
  createdAt     DateTime  @default(now())
  /// Timestamp de última actualización del registro
  updatedAt     DateTime  @updatedAt

  /// Relaciones
  estudiante Estudiante @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)
  sector     Sector     @relation(fields: [sector_id], references: [id], onDelete: Cascade)

  /// Índice único para evitar duplicados (un estudiante no puede estar dos veces en el mismo sector activo)
  @@unique([estudiante_id, sector_id])
  @@index([estudiante_id])
  @@index([sector_id])
  @@map("estudiante_sectores")
}

/// Modelo para equipos de gamificación
/// Representa los equipos a los que pueden unirse los estudiantes
model Equipo {
  /// Identificador único del equipo
  id               String       @id @default(cuid())
  /// Nombre único del equipo (Fénix, Dragón, Tigre, Águila)
  nombre           String       @unique
  /// Color primario del equipo en formato hexadecimal
  color_primario   String
  /// Color secundario del equipo en formato hexadecimal
  color_secundario String
  /// URL del ícono del equipo (opcional)
  icono_url        String?
  /// Puntos totales acumulados por el equipo
  puntos_totales   Int          @default(0)
  /// Timestamp de creación del registro
  createdAt        DateTime     @default(now())
  /// Timestamp de última actualización del registro
  updatedAt        DateTime     @updatedAt
  estudiantes      Estudiante[]

  @@map("equipos")
}

/// Modelo para docentes (profesores) de la plataforma
/// Representa a los usuarios educadores que dictan clases
model Docente {
  /// Identificador único del docente
  id                                 String                    @id @default(cuid())
  /// Email único del docente - usado para autenticación
  email                              String                    @unique
  /// Hash bcrypt de la contraseña
  password_hash                      String
  /// Password temporal en texto plano - se muestra al admin al crear el docente
  /// Se borra después del primer cambio de contraseña
  password_temporal                  String?
  /// Nombre del docente
  nombre                             String
  /// Apellido del docente
  apellido                           String
  /// Título profesional (ej: "Profesor de Matemática", "Licenciado en Física")
  titulo                             String?
  /// Biografía o descripción del docente
  bio                                String?
  /// Timestamp de creación del registro
  createdAt                          DateTime                  @default(now())
  /// Timestamp de última actualización del registro
  updatedAt                          DateTime                  @updatedAt
  /// Disponibilidad horaria del docente (ej: {"lunes": ["09:00-12:00", "14:00-18:00"], "martes": ["10:00-13:00"]})
  /// Se almacena como JSON object con días de la semana como keys
  disponibilidad_horaria             Json?
  /// Especialidades del docente (ej: ["Álgebra", "Geometría", "Trigonometría"])
  /// Se almacena como JSON array de strings
  especialidades                     Json?
  /// Estado del docente (activo, inactivo, vacaciones)
  estado                             String                    @default("activo")
  /// Años de experiencia docente
  experiencia_anos                   Int?
  /// Nivel educativo que el docente puede impartir (ej: ["Primaria", "Secundaria", "Universidad"])
  /// Se almacena como JSON array de strings
  nivel_educativo                    Json?
  /// Roles asignados al docente (puede ser docente y admin simultáneamente)
  /// Ejemplo: ["docente", "admin"]
  roles                              Json                      @default("[\"docente\"]")
  /// Teléfono de contacto (opcional)
  telefono                           String?
  /// Indica si el docente debe cambiar su contraseña en el próximo login
  /// true = contraseña temporal (generada por admin)
  /// false = contraseña elegida por el docente
  debe_cambiar_password              Boolean                   @default(true)
  /// Fecha del último cambio de contraseña
  fecha_ultimo_cambio                DateTime?
  clases                             Clase[]
  claseGrupos                        ClaseGrupo[]
  rutasEspecialidad                  DocenteRuta[]
  eventos                            Evento[]
  logrosAprobados                    LogroDesbloqueado[]       @relation("LogrosAprobados")
  notificaciones                     Notificacion[]
  puntosOtorgados                    PuntoObtenido[]           @relation("PuntosOtorgados")
  asignacionesPlanificaciones        AsignacionDocente[]
  asignacionesPlanificacionesSimples AsignacionPlanificacion[]

  @@map("docentes")
}

/// Modelo para administradores del sistema
/// Tienen acceso completo al dashboard administrativo
model Admin {
  /// Identificador único del admin (CUID)
  id                    String    @id @default(cuid())
  /// Email único del admin - usado para autenticación
  email                 String    @unique
  /// Hash bcrypt de la contraseña - NUNCA se envía al frontend
  password_hash         String
  /// Password temporal en texto plano - se muestra al crear el admin
  /// Se borra después del primer cambio de contraseña
  password_temporal     String?
  /// Indica si el admin debe cambiar su contraseña en el próximo login
  debe_cambiar_password Boolean   @default(true)
  /// Fecha del último cambio de contraseña
  fecha_ultimo_cambio   DateTime?
  /// Nombre del admin
  nombre                String
  /// Apellido del admin
  apellido              String
  /// Fecha en que el admin fue creado
  fecha_registro        DateTime  @default(now())
  /// Timestamp de creación del registro
  createdAt             DateTime  @default(now())
  /// Timestamp de última actualización del registro
  updatedAt             DateTime  @updatedAt
  /// DNI del admin (opcional)
  dni                   String?
  /// Roles asignados al admin (puede ser admin y docente simultáneamente)
  /// Ejemplo: ["admin", "docente"]
  roles                 Json      @default("[\"admin\"]")
  /// Teléfono del admin (opcional)
  telefono              String?

  @@map("admins")
}

/// Modelo para productos del catálogo
/// Representa los productos que se pueden comprar: suscripciones, cursos, recursos
model Producto {
  /// Identificador único del producto
  id                      String               @id @default(cuid())
  /// Nombre del producto (ej: "Suscripción Mensual", "Curso de Álgebra")
  nombre                  String
  /// Descripción detallada del producto
  descripcion             String?
  /// Precio del producto en pesos (formato decimal para precisión)
  precio                  Decimal              @db.Decimal(10, 2)
  /// Tipo de producto (Suscripcion, Curso, RecursoDigital)
  tipo                    TipoProducto
  /// Indica si el producto está activo y disponible para compra
  activo                  Boolean              @default(true)
  /// Fecha de inicio del curso (solo para tipo Curso)
  fecha_inicio            DateTime?
  /// Fecha de finalización del curso (solo para tipo Curso)
  fecha_fin               DateTime?
  /// Cupo máximo de estudiantes (solo para tipo Curso)
  cupo_maximo             Int?
  /// Duración en meses de la suscripción (1=mensual, 12=anual, etc.)
  duracion_meses          Int?                 @default(1)
  /// Timestamp de creación del registro
  createdAt               DateTime             @default(now())
  /// Timestamp de última actualización del registro
  updatedAt               DateTime             @updatedAt
  clases                  Clase[]
  inscripciones_curso     InscripcionCurso[]
  membresias              Membresia[]
  modulos                 Modulo[]
  inscripciones_mensuales InscripcionMensual[]

  @@map("productos")
}

/// Modelo para membresías de suscripción
/// Vincula un tutor con un producto de tipo Suscripcion
model Membresia {
  /// Identificador único de la membresía
  id                 String          @id @default(cuid())
  /// ID del tutor propietario de la membresía
  tutor_id           String
  /// ID del producto de suscripción
  producto_id        String
  /// Estado actual de la membresía
  estado             EstadoMembresia @default(Pendiente)
  /// Fecha de inicio de la membresía (se llena cuando webhook confirma)
  fecha_inicio       DateTime?
  /// Fecha del próximo pago (se calcula cuando webhook confirma)
  fecha_proximo_pago DateTime?
  /// ID de preferencia de MercadoPago (para tracking)
  preferencia_id     String?
  /// Timestamp de creación del registro
  createdAt          DateTime        @default(now())
  /// Timestamp de última actualización del registro
  updatedAt          DateTime        @updatedAt
  producto           Producto        @relation(fields: [producto_id], references: [id])
  tutor              Tutor           @relation(fields: [tutor_id], references: [id], onDelete: Cascade)

  @@index([tutor_id, estado])
  @@index([preferencia_id])
  @@map("membresias")
}

/// Modelo para inscripciones a cursos
/// Vincula un estudiante con un producto de tipo Curso
model InscripcionCurso {
  /// Identificador único de la inscripción
  id                String                 @id @default(cuid())
  /// ID del estudiante inscrito
  estudiante_id     String
  /// ID del producto curso
  producto_id       String
  /// Estado de la inscripción
  estado            EstadoInscripcionCurso @default(PreInscrito)
  /// Fecha de inscripción
  fecha_inscripcion DateTime               @default(now())
  /// ID de preferencia de MercadoPago (para tracking)
  preferencia_id    String?
  /// Timestamp de creación del registro
  createdAt         DateTime               @default(now())
  /// Timestamp de última actualización del registro
  updatedAt         DateTime               @updatedAt
  estudiante        Estudiante             @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)
  producto          Producto               @relation(fields: [producto_id], references: [id])

  @@unique([estudiante_id, producto_id])
  @@index([estudiante_id, estado])
  @@index([preferencia_id])
  @@map("inscripciones_curso")
}

/// Modelo para rutas curriculares (temas/categorías de clases)
/// Representa los temas o áreas de conocimiento de las clases
model RutaCurricular {
  /// Identificador único de la ruta
  id          String       @id @default(cuid())
  /// Nombre de la ruta (ej: "Lógica", "Álgebra", "Geometría")
  nombre      String       @unique
  /// Color hexadecimal para identificación visual (opcional)
  color       String?
  /// Descripción de la ruta curricular
  descripcion String?
  /// Timestamp de creación del registro
  createdAt   DateTime     @default(now())
  /// Timestamp de última actualización del registro
  updatedAt   DateTime     @updatedAt
  clases      Clase[]
  claseGrupos ClaseGrupo[]

  @@map("rutas_curriculares")
}

/// Modelo para clases programadas
/// Representa una clase en vivo programada por un admin
model Clase {
  /// Identificador único de la clase
  id                 String             @id @default(cuid())
  /// ID de la ruta curricular (tema de la clase) - OPCIONAL
  ruta_curricular_id String?
  /// ID del docente asignado a la clase
  docente_id         String
  /// Fecha y hora de inicio de la clase
  fecha_hora_inicio  DateTime
  /// Duración de la clase en minutos
  duracion_minutos   Int
  /// Estado de la clase (Programada, Cancelada)
  estado             EstadoClase        @default(Programada)
  /// Cupo máximo de estudiantes
  cupos_maximo       Int
  /// Cupos ocupados actualmente
  cupos_ocupados     Int                @default(0)
  /// ID del producto curso (opcional - si null es clase de suscripción general)
  /// Si tiene valor, solo estudiantes con InscripcionCurso activa pueden reservar
  producto_id        String?
  /// Timestamp de creación del registro
  createdAt          DateTime           @default(now())
  /// Timestamp de última actualización del registro
  updatedAt          DateTime           @updatedAt
  /// Descripción o grupo de la clase (ej: "Niños 6-7 años", "Grupo A", "Preparación olimpiadas")
  descripcion        String?
  /// Nombre o tema de la clase (ej: "Godot", "Scratch", "Preparación Olimpiadas")
  nombre             String
  /// ID del sector (Matemática o Programación) - OPCIONAL
  sector_id          String?
  alertas            Alerta[]
  asistencias        Asistencia[]
  docente            Docente            @relation(fields: [docente_id], references: [id])
  producto           Producto?          @relation(fields: [producto_id], references: [id])
  rutaCurricular     RutaCurricular?    @relation(fields: [ruta_curricular_id], references: [id])
  sector             Sector?            @relation(fields: [sector_id], references: [id])
  eventos            Evento[]
  inscripciones      InscripcionClase[]
  puntosObtenidos    PuntoObtenido[]

  @@index([docente_id])
  @@index([fecha_hora_inicio])
  @@index([estado])
  @@index([producto_id])
  @@map("clases")
}

/// Modelo para Grupos Pedagógicos
/// Representa los niveles educativos o categorías pedagógicas (B1, B2, B3, A1, etc.)
/// Los grupos son conceptos estables que agrupan contenido pedagógico del mismo nivel
model Grupo {
  /// Identificador único del grupo
  id String @id @default(cuid())

  /// Código del grupo (ej: "B1", "B2", "B3", "A1", "OLIMP")
  codigo String @unique

  /// Nombre descriptivo del grupo
  nombre String // "Básico 1", "Básico 2", "Avanzado 1"

  /// Descripción del grupo y nivel educativo
  descripcion String?

  /// Rango de edad sugerido
  edad_minima Int?
  edad_maxima Int?

  /// Sector al que pertenece (Matemática o Programación)
  sector_id String?

  /// Indica si el grupo está activo
  activo Boolean @default(true)

  /// Timestamp de creación
  createdAt DateTime @default(now())

  /// Timestamp de última actualización
  updatedAt DateTime @updatedAt

  /// Relaciones
  sector Sector? @relation(fields: [sector_id], references: [id])

  /// Comisiones (instancias operativas) de este grupo
  comisiones ClaseGrupo[]

  /// Planificaciones mensuales dirigidas a este grupo
  planificaciones PlanificacionMensual[]

  @@index([codigo])
  @@index([activo])
  @@map("grupos")
}

/// Modelo para grupos de clases recurrentes (ahora llamado Comision conceptualmente)
/// Representa un grupo estable de estudiantes que se reúne semanalmente
/// Ejemplo: "GRUPO B1 - Matemática - Lunes 19:30"
model ClaseGrupo {
  /// Identificador único del grupo
  id String @id @default(cuid())

  /// Código del grupo pedagógico (puede repetirse, ej: "B2" para varios horarios)
  /// Se usa principalmente para identificación visual, no es unique
  codigo String

  /// Nombre descriptivo del grupo (este sí es único por instancia)
  nombre String @unique

  /// Tipo de clase grupo
  tipo TipoClaseGrupo @default(GRUPO_REGULAR)

  /// Día de la semana en que se reúne
  dia_semana DiaSemana

  /// Hora de inicio en formato HH:MM (ej: "19:30")
  hora_inicio String

  /// Hora de fin en formato HH:MM (ej: "21:00")
  hora_fin String

  /// Fecha de inicio de vigencia del grupo
  fecha_inicio DateTime

  /// Fecha de fin de vigencia del grupo
  /// Para GRUPO_REGULAR: siempre 15 de diciembre del año
  /// Para CURSO_TEMPORAL: fecha específica definida por admin
  fecha_fin DateTime

  /// Año lectivo al que pertenece (ej: 2025)
  anio_lectivo Int

  /// Cupo máximo de estudiantes
  cupo_maximo Int @default(15)

  /// ID del grupo pedagógico al que pertenece (B1, B2, B3, etc.)
  grupo_id String

  /// ID del docente asignado
  docente_id String

  /// ID de la ruta curricular (tema)
  ruta_curricular_id String?

  /// ID del sector (Matemática o Programación)
  sector_id String?

  /// Nivel o descripción (ej: "6 y 7 años", "Preparación olimpiadas")
  nivel String?

  /// Indica si el grupo está activo
  activo Boolean @default(true)

  /// Timestamp de creación
  createdAt DateTime @default(now())

  /// Timestamp de última actualización
  updatedAt DateTime @updatedAt

  /// Relaciones
  grupo          Grupo           @relation(fields: [grupo_id], references: [id])
  docente        Docente         @relation(fields: [docente_id], references: [id])
  rutaCurricular RutaCurricular? @relation(fields: [ruta_curricular_id], references: [id])
  sector         Sector?         @relation(fields: [sector_id], references: [id])

  /// Estudiantes inscritos en el grupo
  inscripciones InscripcionClaseGrupo[]

  /// Registros de asistencia del grupo
  asistencias AsistenciaClaseGrupo[]

  /// Asignaciones de planificaciones mensuales
  asignacionesPlanificaciones AsignacionDocente[]

  /// Asignaciones de actividades semanales
  asignacionesActividades AsignacionActividadEstudiante[]

  /// Asignaciones de planificaciones simples
  asignacionesPlanificacionesSimples AsignacionPlanificacion[]

  @@index([docente_id])
  @@index([dia_semana])
  @@index([fecha_inicio, fecha_fin])
  @@index([anio_lectivo])
  @@index([activo])
  @@map("clase_grupos")
}

/// Inscripción de un estudiante a un ClaseGrupo
/// Relación muchos-a-muchos entre Estudiante y ClaseGrupo
model InscripcionClaseGrupo {
  /// Identificador único
  id String @id @default(cuid())

  /// ID del grupo de clase
  clase_grupo_id String

  /// ID del estudiante inscrito
  estudiante_id String

  /// ID del tutor del estudiante
  tutor_id String

  /// Fecha de inscripción al grupo
  fecha_inscripcion DateTime @default(now())

  /// Fecha de baja del grupo (si se retira antes del fin)
  fecha_baja DateTime?

  /// Observaciones
  observaciones String?

  /// Timestamp de creación
  createdAt DateTime @default(now())

  /// Timestamp de última actualización
  updatedAt DateTime @updatedAt

  /// Relaciones
  claseGrupo ClaseGrupo @relation(fields: [clase_grupo_id], references: [id], onDelete: Cascade)
  estudiante Estudiante @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)
  tutor      Tutor      @relation(fields: [tutor_id], references: [id])

  @@unique([clase_grupo_id, estudiante_id])
  @@index([estudiante_id])
  @@index([tutor_id])
  @@index([clase_grupo_id])
  @@map("inscripciones_clase_grupo")
}

/// Registro de asistencia a una sesión específica de un ClaseGrupo
/// Se crea cuando el docente marca asistencia un día específico
model AsistenciaClaseGrupo {
  /// Identificador único
  id String @id @default(cuid())

  /// ID del grupo de clase
  clase_grupo_id String

  /// ID del estudiante
  estudiante_id String

  /// Fecha específica de la clase (ej: "2025-10-21" para el lunes 21/10)
  fecha DateTime

  /// Estado de asistencia
  estado EstadoAsistencia

  /// Observaciones del docente sobre el estudiante en esta clase
  observaciones String?

  /// Calificación o feedback cualitativo (opcional)
  feedback String?

  /// Timestamp de creación
  createdAt DateTime @default(now())

  /// Timestamp de última actualización
  updatedAt DateTime @updatedAt

  /// Relaciones
  claseGrupo ClaseGrupo @relation(fields: [clase_grupo_id], references: [id], onDelete: Cascade)
  estudiante Estudiante @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)

  @@unique([clase_grupo_id, estudiante_id, fecha])
  @@index([clase_grupo_id])
  @@index([estudiante_id])
  @@index([fecha])
  @@map("asistencias_clase_grupo")
}

/// Modelo para inscripciones a clases (reservas)
/// Vincula un estudiante con una clase específica
model InscripcionClase {
  /// Identificador único de la inscripción
  id                String     @id @default(cuid())
  /// ID de la clase
  clase_id          String
  /// ID del estudiante inscrito
  estudiante_id     String
  /// ID del tutor que realizó la reserva
  tutor_id          String
  /// Fecha de la inscripción
  fecha_inscripcion DateTime   @default(now())
  /// Observaciones o notas sobre la inscripción
  observaciones     String?
  /// Timestamp de creación del registro
  createdAt         DateTime   @default(now())
  /// Timestamp de última actualización del registro
  updatedAt         DateTime   @updatedAt
  clase             Clase      @relation(fields: [clase_id], references: [id], onDelete: Cascade)
  estudiante        Estudiante @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)
  tutor             Tutor      @relation(fields: [tutor_id], references: [id])

  @@unique([clase_id, estudiante_id])
  @@index([estudiante_id])
  @@index([tutor_id])
  @@map("inscripciones_clase")
}

/// Modelo para registro de asistencia
/// Registra la asistencia y feedback del docente después de la clase
model Asistencia {
  /// Identificador único del registro de asistencia
  id               String           @id @default(cuid())
  /// ID de la clase
  clase_id         String
  /// ID del estudiante
  estudiante_id    String
  /// Estado de asistencia (Presente, Ausente, Justificado)
  estado           EstadoAsistencia
  /// Observaciones del docente sobre el estudiante en esta clase
  observaciones    String?
  /// Puntos otorgados al estudiante en esta clase (para gamificación)
  puntos_otorgados Int              @default(0)
  /// Fecha y hora del registro de asistencia
  fecha_registro   DateTime         @default(now())
  /// Timestamp de creación del registro
  createdAt        DateTime         @default(now())
  /// Timestamp de última actualización del registro
  updatedAt        DateTime         @updatedAt
  clase            Clase            @relation(fields: [clase_id], references: [id], onDelete: Cascade)
  estudiante       Estudiante       @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)

  @@unique([clase_id, estudiante_id])
  @@index([estudiante_id])
  @@index([estado])
  @@index([clase_id, estudiante_id, estado])
  @@map("asistencias")
}

/// Modelo para alertas administrativas generadas desde observaciones de docentes
/// Permite al admin detectar y resolver situaciones que requieren atención
model Alerta {
  /// Identificador único de la alerta
  id            String     @id @default(cuid())
  /// ID del estudiante relacionado con la alerta
  estudiante_id String
  /// ID de la clase donde se generó la alerta
  clase_id      String
  /// Descripción de la alerta (observaciones del docente)
  descripcion   String
  /// Fecha de creación de la alerta
  fecha         DateTime   @default(now())
  /// Indica si la alerta ha sido resuelta
  resuelta      Boolean    @default(false)
  /// Timestamp de creación del registro
  createdAt     DateTime   @default(now())
  /// Timestamp de última actualización del registro
  updatedAt     DateTime   @updatedAt
  clase         Clase      @relation(fields: [clase_id], references: [id], onDelete: Cascade)
  estudiante    Estudiante @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)

  @@index([estudiante_id])
  @@index([resuelta])
  @@index([fecha])
  @@map("alertas")
}

/// Modelo para acciones puntuables (configuración de gamificación)
/// Define las acciones por las cuales un docente puede otorgar puntos
model AccionPuntuable {
  /// Identificador único de la acción
  id              String          @id @default(cuid())
  /// Nombre de la acción (ej: "Razonamiento destacado", "Participación activa")
  nombre          String          @unique
  /// Descripción de la acción
  descripcion     String
  /// Cantidad de puntos que otorga esta acción
  puntos          Int
  /// Indica si la acción está activa
  activo          Boolean         @default(true)
  /// Timestamp de creación del registro
  createdAt       DateTime        @default(now())
  /// Timestamp de última actualización del registro
  updatedAt       DateTime        @updatedAt
  puntosObtenidos PuntoObtenido[]

  @@map("acciones_puntuables")
}

/// Modelo para logros/insignias (configuración de gamificación)
/// Define los logros que los estudiantes pueden desbloquear
model Logro {
  /// Identificador único del logro
  id                  String              @id @default(cuid())
  /// Nombre del logro (ej: "Primera Clase", "Asistencia Perfecta")
  nombre              String              @unique
  /// Descripción del logro
  descripcion         String
  /// Icono o emoji del logro
  icono               String
  /// Puntos extra que otorga desbloquear este logro
  puntos              Int                 @default(0)
  /// URL de la imagen del badge (opcional)
  imagen_url          String?
  /// Requisito o condición para desbloquear (texto descriptivo)
  requisito           String?
  /// Indica si el logro está activo
  activo              Boolean             @default(true)
  /// Timestamp de creación del registro
  createdAt           DateTime            @default(now())
  /// Timestamp de última actualización del registro
  updatedAt           DateTime            @updatedAt
  leccionesDesbloque  Leccion[]
  logrosDesbloqueados LogroDesbloqueado[]

  @@map("logros")
}

/// Modelo para registro de puntos obtenidos (tabla transaccional)
/// Cada registro representa un evento donde un estudiante ganó puntos
model PuntoObtenido {
  /// Identificador único del registro
  id             String          @id @default(cuid())
  /// ID del estudiante que obtuvo los puntos
  estudiante_id  String
  /// ID del docente que otorgó los puntos
  docente_id     String
  /// ID de la acción puntuable
  accion_id      String
  /// ID de la clase donde se ganaron los puntos (opcional)
  clase_id       String?
  /// Cantidad de puntos otorgados (se guarda para preservar historial)
  puntos         Int
  /// Contexto o razón adicional (opcional)
  contexto       String?
  /// Fecha y hora en que se otorgaron los puntos
  fecha_otorgado DateTime        @default(now())
  /// Timestamp de creación del registro
  createdAt      DateTime        @default(now())
  /// Timestamp de última actualización del registro
  updatedAt      DateTime        @updatedAt
  accion         AccionPuntuable @relation(fields: [accion_id], references: [id])
  clase          Clase?          @relation(fields: [clase_id], references: [id])
  docente        Docente         @relation("PuntosOtorgados", fields: [docente_id], references: [id])
  estudiante     Estudiante      @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)

  @@index([estudiante_id])
  @@index([docente_id])
  @@index([accion_id])
  @@index([fecha_otorgado])
  @@map("puntos_obtenidos")
}

/// Modelo para logros desbloqueados (tabla transaccional)
/// Registra cuando un estudiante desbloquea un logro
model LogroDesbloqueado {
  /// Identificador único del registro
  id             String     @id @default(cuid())
  /// ID del estudiante que desbloqueó el logro
  estudiante_id  String
  /// ID del logro desbloqueado
  logro_id       String
  /// ID del docente que otorgó el logro (opcional, puede ser automático)
  docente_id     String?
  /// Fecha y hora en que se desbloqueó el logro
  fecha_obtenido DateTime   @default(now())
  /// Contexto o razón del desbloqueo (opcional)
  contexto       String?
  /// Timestamp de creación del registro
  createdAt      DateTime   @default(now())
  /// Timestamp de última actualización del registro
  updatedAt      DateTime   @updatedAt
  docente        Docente?   @relation("LogrosAprobados", fields: [docente_id], references: [id])
  estudiante     Estudiante @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)
  logro          Logro      @relation(fields: [logro_id], references: [id])

  @@unique([estudiante_id, logro_id])
  @@index([estudiante_id])
  @@index([logro_id])
  @@index([fecha_obtenido])
  @@map("logros_desbloqueados")
}

/// Módulo dentro de un curso
/// Agrupa lecciones relacionadas temáticamente
/// Ejemplo: "Módulo 1: Variables y Expresiones"
model Modulo {
  /// Identificador único del módulo
  id                        String    @id @default(cuid())
  /// ID del producto (curso) al que pertenece
  producto_id               String
  /// Título del módulo visible para estudiantes
  /// Ejemplo: "Fundamentos de Álgebra"
  titulo                    String
  /// Descripción breve del módulo (opcional)
  /// Ayuda al estudiante a entender qué aprenderá
  descripcion               String?
  /// Orden de presentación del módulo dentro del curso
  /// 1, 2, 3... Permite reordenamiento manual
  orden                     Int
  /// Duración estimada total del módulo en minutos
  /// Suma automática de duraciones de lecciones
  duracion_estimada_minutos Int       @default(0)
  /// Cantidad de puntos totales que otorga completar el módulo
  /// Suma de puntos_por_completar de todas las lecciones
  puntos_totales            Int       @default(0)
  /// Si está publicado y visible para estudiantes
  publicado                 Boolean   @default(false)
  /// Timestamp de creación del registro
  createdAt                 DateTime  @default(now())
  /// Timestamp de última actualización del registro
  updatedAt                 DateTime  @updatedAt
  lecciones                 Leccion[]
  producto                  Producto  @relation(fields: [producto_id], references: [id], onDelete: Cascade)

  @@index([producto_id, orden])
  @@index([producto_id])
  @@map("modulos")
}

/// Lección individual dentro de un módulo
/// Unidad mínima de aprendizaje (Microlearning)
/// Duración recomendada: 5-15 minutos
model Leccion {
  /// Identificador único de la lección
  id                        String            @id @default(cuid())
  /// ID del módulo al que pertenece
  modulo_id                 String
  /// Título de la lección visible para estudiantes
  /// Debe ser descriptivo y claro
  /// Ejemplo: "Cómo resolver ecuaciones lineales"
  titulo                    String
  /// Descripción opcional de la lección
  /// Resumen de lo que aprenderá el estudiante
  descripcion               String?
  /// Tipo de contenido de esta lección
  tipo_contenido            TipoContenido
  /// Contenido de la lección (formato según tipo)
  /// - Video: URL del video
  /// - Texto: Markdown con el contenido
  /// - Quiz: JSON con preguntas y opciones
  /// - Tarea: JSON con instrucciones y rubrica
  contenido                 String
  /// Orden de presentación dentro del módulo
  /// 1, 2, 3... Permite reordenamiento manual
  orden                     Int
  /// Puntos otorgados al completar esta lección
  /// Incentiva al estudiante a terminar
  /// Rango recomendado: 5-20 puntos por lección
  puntos_por_completar      Int               @default(10)
  /// ID del logro que se desbloquea al completar (opcional)
  /// Ejemplo: "Maestro del Álgebra" al terminar módulo completo
  logro_desbloqueable_id    String?
  /// Duración estimada en minutos
  /// Ayuda al estudiante a planificar su tiempo
  /// Rango recomendado: 5-15 minutos (Microlearning)
  duracion_estimada_minutos Int?
  /// Si la lección está publicada y visible
  activo                    Boolean           @default(true)
  /// Recursos adicionales (opcional)
  /// JSON con links, PDFs, etc.
  /// Ejemplo: {"links": ["https://...", "https://..."], "pdfs": ["url1"]}
  recursos_adicionales      String?
  /// Prerequisito (opcional)
  /// ID de lección que debe completarse antes
  /// Implementa Progressive Disclosure
  leccion_prerequisito_id   String?
  /// Timestamp de creación del registro
  createdAt                 DateTime          @default(now())
  /// Timestamp de última actualización del registro
  updatedAt                 DateTime          @updatedAt
  leccionPrerequisito       Leccion?          @relation("LeccionPrerequisito", fields: [leccion_prerequisito_id], references: [id])
  leccionesDependientes     Leccion[]         @relation("LeccionPrerequisito")
  logro                     Logro?            @relation(fields: [logro_desbloqueable_id], references: [id])
  modulo                    Modulo            @relation(fields: [modulo_id], references: [id], onDelete: Cascade)
  progresos                 ProgresoLeccion[]

  @@index([modulo_id, orden])
  @@index([modulo_id])
  @@index([tipo_contenido])
  @@map("lecciones")
}

/// Progreso de un estudiante en una lección específica
/// Tracking granular del aprendizaje (Learning Analytics)
model ProgresoLeccion {
  /// Identificador único del progreso
  id                       String     @id @default(cuid())
  /// ID del estudiante
  estudiante_id            String
  /// ID de la lección
  leccion_id               String
  /// Si la lección fue completada
  /// true = estudiante terminó y marcó como completada
  completada               Boolean    @default(false)
  /// Porcentaje de progreso (0-100)
  /// Útil para lecciones largas o videos
  /// 0 = no iniciado, 50 = a la mitad, 100 = completado
  progreso                 Int        @default(0)
  /// Fecha y hora en que inició la lección
  fecha_inicio             DateTime   @default(now())
  /// Fecha y hora en que completó la lección (si aplica)
  fecha_completada         DateTime?
  /// Tiempo total invertido en minutos (opcional)
  /// Útil para analytics y métricas de engagement
  tiempo_invertido_minutos Int?
  /// Calificación obtenida (para quizzes)
  /// Rango: 0-100 (porcentaje)
  calificacion             Int?
  /// Número de intentos (para quizzes/tareas)
  intentos                 Int        @default(0)
  /// Notas del estudiante (opcional)
  /// Permite al estudiante tomar apuntes privados
  notas_estudiante         String?
  /// Última respuesta del estudiante (para quizzes/tareas)
  /// JSON con las respuestas dadas
  ultima_respuesta         String?
  /// Timestamp de creación del registro
  createdAt                DateTime   @default(now())
  /// Timestamp de última actualización del registro
  updatedAt                DateTime   @updatedAt
  estudiante               Estudiante @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)
  leccion                  Leccion    @relation(fields: [leccion_id], references: [id], onDelete: Cascade)

  @@unique([estudiante_id, leccion_id])
  @@index([estudiante_id])
  @@index([leccion_id])
  @@index([estudiante_id, completada])
  @@map("progreso_lecciones")
}

/// Sistema de notificaciones para docentes
/// Permite notificar eventos importantes como clases próximas, alertas de estudiantes, etc.
model Notificacion {
  /// Identificador único de la notificación
  id         String           @id @default(cuid())
  /// Tipo de notificación
  tipo       TipoNotificacion
  /// Título de la notificación
  titulo     String
  /// Mensaje descriptivo de la notificación
  mensaje    String
  /// Indica si la notificación ha sido leída
  leida      Boolean          @default(false)
  /// ID del docente al que pertenece la notificación
  docente_id String
  /// Metadata adicional en formato JSON (clase_id, estudiante_id, etc)
  metadata   Json?
  /// Timestamp de creación de la notificación
  createdAt  DateTime         @default(now())
  docente    Docente          @relation(fields: [docente_id], references: [id], onDelete: Cascade)

  @@index([docente_id, leida])
  @@index([docente_id, createdAt])
  @@map("notificaciones")
}

/// Eventos del calendario del docente
/// Modelo base polimórfico: puede ser Clase, Tarea, Recordatorio o Nota
model Evento {
  /// Identificador único del evento
  id             String        @id @default(cuid())
  /// Título del evento
  titulo         String
  /// Descripción detallada del evento
  descripcion    String?
  /// Tipo de evento (CLASE, TAREA, RECORDATORIO, NOTA)
  tipo           TipoEvento
  /// Fecha y hora de inicio del evento
  fecha_inicio   DateTime
  /// Fecha y hora de fin del evento
  fecha_fin      DateTime
  /// Indica si el evento dura todo el día
  es_todo_el_dia Boolean       @default(false)
  /// ID del docente al que pertenece el evento
  docente_id     String
  /// ID de la clase relacionada (para reprogramación/recuperación)
  clase_id       String?
  /// Timestamp de creación del evento
  createdAt      DateTime      @default(now())
  /// Timestamp de última actualización del evento
  updatedAt      DateTime      @updatedAt
  clase          Clase?        @relation(fields: [clase_id], references: [id])
  docente        Docente       @relation(fields: [docente_id], references: [id], onDelete: Cascade)
  nota           Nota?
  recordatorio   Recordatorio?
  tarea          Tarea?

  @@index([docente_id, fecha_inicio])
  @@index([tipo])
  @@index([docente_id, tipo])
  @@index([clase_id])
  @@map("eventos")
}

/// Tarea administrativa/pedagógica del docente
/// Extensión del modelo Evento para tareas con funcionalidad completa
model Tarea {
  /// Identificador único de la tarea
  id                        String         @id @default(cuid())
  /// ID del evento base asociado
  evento_id                 String         @unique
  /// Estado actual de la tarea
  estado                    EstadoTarea    @default(PENDIENTE)
  /// Nivel de prioridad de la tarea
  prioridad                 PrioridadTarea @default(MEDIA)
  /// Porcentaje de completitud (0-100)
  porcentaje_completado     Int            @default(0)
  /// Categoría personalizada de la tarea (ej: "Planificación", "Evaluación")
  categoria                 String?
  /// Etiquetas para organización (array de strings)
  etiquetas                 String[]
  /// Subtareas en formato JSON
  /// Estructura: [{id: string, titulo: string, completada: boolean, orden: number}]
  subtareas                 Json           @default("[]")
  /// Archivos adjuntos en formato JSON
  /// Estructura: [{id: string, nombre: string, url: string, tipo: string, tamaño: number}]
  archivos                  Json           @default("[]")
  /// ID de clase relacionada (opcional)
  clase_relacionada_id      String?
  /// ID de estudiante relacionado (opcional)
  estudiante_relacionado_id String?
  /// Tiempo estimado para completar en minutos
  tiempo_estimado_minutos   Int?
  /// Tiempo real invertido en minutos
  tiempo_real_minutos       Int?
  /// Configuración de recurrencia en formato JSON
  /// Estructura: {tipo: 'DIARIA'|'SEMANAL'|'MENSUAL', intervalo: number, dias_semana: number[], fecha_fin: string, excepciones: string[]}
  recurrencia               Json?
  /// Recordatorios configurados en formato JSON
  /// Estructura: [{minutos_antes: number, enviado: boolean}]
  recordatorios             Json           @default("[]")
  /// Fecha de completitud
  completedAt               DateTime?
  evento                    Evento         @relation(fields: [evento_id], references: [id], onDelete: Cascade)

  @@index([estado])
  @@index([prioridad])
  @@index([categoria])
  @@map("tareas")
}

/// Recordatorio simple para el docente
/// Extensión del modelo Evento para recordatorios básicos
model Recordatorio {
  /// Identificador único del recordatorio
  id         String  @id @default(cuid())
  /// ID del evento base asociado
  evento_id  String  @unique
  /// Indica si el recordatorio fue completado/marcado
  completado Boolean @default(false)
  /// Color personalizado del recordatorio (formato hex)
  color      String  @default("#6366f1")
  evento     Evento  @relation(fields: [evento_id], references: [id], onDelete: Cascade)

  @@map("recordatorios")
}

/// Nota de texto largo para el docente
/// Extensión del modelo Evento para notas/apuntes
model Nota {
  /// Identificador único de la nota
  id        String  @id @default(cuid())
  /// ID del evento base asociado
  evento_id String  @unique
  /// Contenido de la nota (texto largo)
  contenido String
  /// Categoría de la nota (opcional)
  categoria String?
  /// Color personalizado de la nota (formato hex)
  color     String  @default("#8b5cf6")
  evento    Evento  @relation(fields: [evento_id], references: [id], onDelete: Cascade)

  @@index([categoria])
  @@map("notas")
}

/// Configuración de niveles del sistema de gamificación
/// Define los nombres creativos y requisitos para cada nivel
model NivelConfig {
  /// Número del nivel (1, 2, 3, etc.)
  nivel          Int      @id
  /// Nombre creativo del nivel
  /// Ejemplos: "Explorador Numérico", "Maestro del Cálculo", "Genio Matemático"
  nombre         String
  /// Descripción del nivel
  descripcion    String
  /// Puntos mínimos requeridos para alcanzar este nivel
  puntos_minimos Int
  /// Puntos máximos antes de pasar al siguiente nivel
  puntos_maximos Int
  /// Color hex asociado al nivel para UI
  color          String   @default("#6366F1")
  /// Icono o emoji asociado al nivel
  icono          String   @default("🌟")
  /// Timestamp de creación del registro
  createdAt      DateTime @default(now())
  /// Timestamp de última actualización del registro
  updatedAt      DateTime @updatedAt

  @@map("niveles_config")
}

/// Modelo para sectores de trabajo (Matemática, Programación, etc.)
/// Permite organizar las especialidades en categorías principales
model Sector {
  /// Identificador único del sector
  id                 String             @id @default(cuid())
  /// Nombre del sector (ej: "Matemática", "Programación")
  nombre             String             @unique
  /// Descripción del sector
  descripcion        String?
  /// Color hex para UI (ej: "#FF5733")
  color              String             @default("#6366F1")
  /// Icono o emoji para UI (ej: "📐", "💻")
  icono              String             @default("📚")
  /// Indica si el sector está activo
  activo             Boolean            @default(true)
  /// Timestamp de creación del registro
  createdAt          DateTime           @default(now())
  /// Timestamp de última actualización del registro
  updatedAt          DateTime           @updatedAt
  clases             Clase[]
  claseGrupos        ClaseGrupo[]
  grupos             Grupo[]
  docentes           DocenteRuta[]
  /// DEPRECADO: Relación uno-a-muchos con estudiantes (usar estudianteSectores[] en su lugar)
  estudiantes        Estudiante[]       @relation("EstudianteSectorLegacy")
  /// NUEVO: Relación muchos-a-muchos con estudiantes a través de EstudianteSector
  estudianteSectores EstudianteSector[]
  rutas              RutaEspecialidad[]

  @@map("sectores")
}

/// Modelo para rutas de especialidad personalizadas dentro de cada sector
/// Ejemplos: "Roblox", "Scratch" (Programación), "Base-Progresivo", "Lógico-Desafiante" (Matemática)
model RutaEspecialidad {
  /// Identificador único de la ruta
  id          String        @id @default(cuid())
  /// Nombre de la ruta (ej: "Roblox", "Base-Progresivo")
  nombre      String
  /// Descripción de la ruta
  descripcion String?
  /// ID del sector al que pertenece
  sectorId    String
  /// Indica si la ruta está activa
  activo      Boolean       @default(true)
  /// Timestamp de creación del registro
  createdAt   DateTime      @default(now())
  /// Timestamp de última actualización del registro
  updatedAt   DateTime      @updatedAt
  docentes    DocenteRuta[]
  sector      Sector        @relation(fields: [sectorId], references: [id], onDelete: Cascade)

  @@unique([sectorId, nombre])
  @@index([sectorId])
  @@map("rutas_especialidad")
}

/// Modelo de relación muchos-a-muchos entre Docentes y Rutas de Especialidad
/// Un docente puede trabajar en múltiples rutas y sectores
model DocenteRuta {
  /// Identificador único de la relación
  id         String           @id @default(cuid())
  /// ID del docente
  docenteId  String
  /// ID de la ruta de especialidad
  rutaId     String
  /// ID del sector (desnormalizado para queries más rápidas)
  sectorId   String
  /// Fecha de asignación
  asignadoEn DateTime         @default(now())
  docente    Docente          @relation(fields: [docenteId], references: [id], onDelete: Cascade)
  ruta       RutaEspecialidad @relation(fields: [rutaId], references: [id], onDelete: Cascade)
  sector     Sector           @relation(fields: [sectorId], references: [id], onDelete: Cascade)

  @@unique([docenteId, rutaId])
  @@index([docenteId])
  @@index([rutaId])
  @@index([sectorId])
  @@map("docentes_rutas")
}

/// Enum para tipos de productos disponibles
enum TipoProducto {
  Suscripcion
  Curso
  RecursoDigital
}

/// Enum para estados de membresía
enum EstadoMembresia {
  Pendiente
  Activa
  Atrasada
  Cancelada
}

/// Enum para estados de inscripción a cursos
enum EstadoInscripcionCurso {
  PreInscrito
  Activo
  Finalizado
}

/// Enum para estados de clase
enum EstadoClase {
  Programada
  Cancelada
}

/// Enum para estados de asistencia
enum EstadoAsistencia {
  Presente
  Ausente
  Justificado
}

/// Tipos de contenido educativo soportados
/// Cada tipo requiere renderizado diferente en frontend
enum TipoContenido {
  Video
  Texto
  Quiz
  Tarea
  JuegoInteractivo
  Lectura
  Practica
}

/// Tipos de notificaciones disponibles
enum TipoNotificacion {
  ClaseProxima
  AsistenciaPendiente
  EstudianteAlerta
  ClaseCancelada
  LogroEstudiante
  Recordatorio
  General

  @@map("tipo_notificacion")
}

/// Tipos de eventos disponibles en el calendario
enum TipoEvento {
  CLASE
  TAREA
  RECORDATORIO
  NOTA

  @@map("tipo_evento")
}

/// Estados de una tarea
enum EstadoTarea {
  PENDIENTE
  EN_PROGRESO
  COMPLETADA
  CANCELADA

  @@map("estado_tarea")
}

/// Niveles de prioridad para tareas
enum PrioridadTarea {
  BAJA
  MEDIA
  ALTA
  URGENTE

  @@map("prioridad_tarea")
}

// ============================================================================
// SISTEMA DE PAGOS Y CONTABILIDAD
// ============================================================================

/// Configuración global de precios (Tabla singleton)
/// Solo existe UN registro con id="singleton"
model ConfiguracionPrecios {
  /// ID fijo "singleton" para garantizar un solo registro
  id String @id @default("singleton")

  /// Precios base por tipo de producto
  precio_club_matematicas      Decimal @default(50000) @db.Decimal(10, 2)
  precio_cursos_especializados Decimal @default(55000) @db.Decimal(10, 2)

  /// Precios con descuentos configurables
  precio_multiple_actividades Decimal @default(44000) @db.Decimal(10, 2)
  precio_hermanos_basico      Decimal @default(44000) @db.Decimal(10, 2)
  precio_hermanos_multiple    Decimal @default(38000) @db.Decimal(10, 2)

  /// Descuento AACREA (Asociación Altas Capacidades)
  descuento_aacrea_porcentaje Decimal @default(20) @db.Decimal(5, 2)
  descuento_aacrea_activo     Boolean @default(true)

  /// Configuración de notificaciones
  dia_vencimiento         Int     @default(15)
  dias_antes_recordatorio Int     @default(5)
  notificaciones_activas  Boolean @default(true)

  /// Metadata
  actualizado_por_admin_id String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  /// Relaciones
  historial HistorialCambioPrecios[]

  @@map("configuracion_precios")
}

/// Historial de cambios en la configuración de precios
/// Auditoría completa de modificaciones
model HistorialCambioPrecios {
  /// Identificador único del cambio
  id String @id @default(cuid())

  /// Referencia a la configuración
  configuracion_id String

  /// Valores antes y después del cambio (JSON flexible)
  valores_anteriores Json
  valores_nuevos     Json

  /// Metadata del cambio
  motivo_cambio String?
  admin_id      String
  fecha_cambio  DateTime @default(now())

  /// Relaciones
  configuracion ConfiguracionPrecios @relation(fields: [configuracion_id], references: [id])

  @@index([configuracion_id])
  @@index([fecha_cambio])
  @@map("historial_cambio_precios")
}

/// Inscripción mensual de un estudiante a un producto
/// Reemplaza el concepto de "reserva" por facturación mensual
model InscripcionMensual {
  /// Identificador único
  id String @id @default(cuid())

  /// Relaciones principales
  estudiante_id String
  producto_id   String
  tutor_id      String

  /// Período de facturación
  anio    Int
  mes     Int // 1-12
  periodo String // "2025-01" para facilitar queries

  /// Cálculo de precios (guardado para historial)
  precio_base        Decimal @db.Decimal(10, 2)
  descuento_aplicado Decimal @default(0) @db.Decimal(10, 2)
  precio_final       Decimal @db.Decimal(10, 2)

  /// Metadata del cálculo
  tipo_descuento  TipoDescuento
  detalle_calculo String // Explicación del cálculo aplicado

  /// Estado de pago
  estado_pago       EstadoPago @default(Pendiente)
  fecha_vencimiento DateTime? // Fecha límite de pago
  fecha_pago        DateTime?
  metodo_pago       String? // "Efectivo", "Transferencia", "MercadoPago"
  comprobante_url   String? // URL del comprobante subido
  observaciones     String?

  /// Auditoría
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// Relaciones
  estudiante Estudiante @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)
  producto   Producto   @relation(fields: [producto_id], references: [id])
  tutor      Tutor      @relation(fields: [tutor_id], references: [id])

  @@unique([estudiante_id, producto_id, periodo])
  @@index([tutor_id, periodo])
  @@index([estado_pago])
  @@index([periodo])
  @@map("inscripciones_mensuales")
}

/// Gestión de becas y descuentos especiales
model Beca {
  /// Identificador único
  id String @id @default(cuid())

  /// Estudiante beneficiado
  estudiante_id String

  /// Tipo y configuración de la beca
  tipo_beca        String // "Mérito Académico", "Social", "Deportiva", etc
  descuento_tipo   DescuentoBecaTipo
  descuento_valor  Decimal           @db.Decimal(10, 2) // Porcentaje o monto fijo
  productos_aplica Json // Array de IDs de productos donde aplica

  /// Vigencia
  fecha_inicio DateTime
  fecha_fin    DateTime
  activa       Boolean  @default(true)

  /// Metadata
  motivo_beca           String?
  aprobada_por_admin_id String?
  observaciones         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  /// Relaciones
  estudiante Estudiante @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)

  @@index([estudiante_id])
  @@index([activa])
  @@map("becas")
}

// ============================================================================
// ENUMS DEL SISTEMA DE PAGOS
// ============================================================================

/// Tipos de descuento aplicables
enum TipoDescuento {
  NINGUNO
  MULTIPLE_ACTIVIDADES
  HERMANOS_BASICO
  HERMANOS_MULTIPLE
  AACREA
  BECA

  @@map("tipo_descuento")
}

/// Estados del pago
enum EstadoPago {
  Pendiente
  Pagado
  Vencido
  Parcial
  Becado

  @@map("estado_pago")
}

/// Tipo de descuento en becas
enum DescuentoBecaTipo {
  PORCENTAJE
  MONTO_FIJO

  @@map("descuento_beca_tipo")
}

/// Tipo de clase grupo
enum TipoClaseGrupo {
  GRUPO_REGULAR // Clase permanente del año lectivo (finaliza 15/dic)
  CURSO_TEMPORAL // Curso con fecha de fin específica

  @@map("tipo_clase_grupo")
}

/// Día de la semana para clases recurrentes
enum DiaSemana {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO

  @@map("dia_semana")
}

// ============================================================================
// SISTEMA DE PLANIFICACIONES MENSUALES
// ============================================================================

/// Catálogo de planificaciones mensuales creadas por Admin
/// Una planificación = 1 mes completo para un código de grupo (B1, B2, B3)
model PlanificacionMensual {
  /// Identificador único
  id String @id @default(cuid())

  // ===== TARGETING: A QUÉ GRUPO VA DIRIGIDA =====
  /// ID del grupo pedagógico al que aplica (B1, B2, B3, A1, etc.)
  grupo_id String

  /// Mes (1-12)
  mes Int

  /// Año (2025, 2026, etc.)
  anio Int

  // ===== CONTENIDO =====
  /// Título de la planificación
  titulo String // "Multiplicaciones - Marzo 2025"

  /// Descripción general del mes
  descripcion String

  /// Temática principal del mes
  tematica_principal String // "Multiplicaciones", "Fracciones", "Geometría"

  /// Objetivos de aprendizaje del mes
  objetivos_aprendizaje String[]

  // ===== METADATA =====
  /// Estado de la planificación
  estado EstadoPlanificacion @default(BORRADOR)

  /// Fecha en que se publicó (visible para docentes)
  fecha_publicacion DateTime?

  /// Notas para docentes (instrucciones generales)
  notas_docentes String?

  // ===== RELACIONES =====
  /// Grupo pedagógico al que pertenece
  grupo Grupo @relation(fields: [grupo_id], references: [id])

  /// Actividades semanales de esta planificación
  actividades ActividadSemanal[]

  /// Asignaciones que hicieron los docentes
  asignaciones AsignacionDocente[]

  // ===== AUDITORÍA =====
  created_by_admin_id String
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  /// Solo UNA planificación por grupo por mes
  @@unique([grupo_id, mes, anio])
  @@index([grupo_id, mes, anio])
  @@index([estado])
  @@map("planificaciones_mensuales")
}

/// Estados posibles de una planificación
enum EstadoPlanificacion {
  BORRADOR // Admin está armándola, no visible para docentes
  PUBLICADA // Visible para docentes, pueden asignar
  ARCHIVADA // Mes pasado, solo lectura

  @@map("estado_planificacion")
}

/// Nivel de dificultad de una actividad
enum NivelDificultad {
  BASICO
  INTERMEDIO
  AVANZADO
  OLIMPICO

  @@map("nivel_dificultad")
}

/// Actividad semanal dentro de una planificación mensual
/// Cada semana tiene UNA actividad principal (juego/ejercicio)
model ActividadSemanal {
  /// Identificador único
  id String @id @default(cuid())

  /// Planificación a la que pertenece
  planificacion_id String

  // ===== UBICACIÓN TEMPORAL =====
  /// Número de semana dentro del mes (1, 2, 3, 4)
  semana_numero Int

  /// Título de la semana
  titulo String // "Semana 1: Tablas del 1 al 3"

  /// Descripción de la actividad
  descripcion String

  // ===== COMPONENTE REACT =====
  /// Nombre del componente React que se va a renderizar
  componente_nombre String // "JuegoTablasMultiplicar"

  /// Props que recibe el componente (JSON flexible)
  componente_props Json // { "tablas": [1,2,3], "nivel": "basico" }

  // ===== CONFIGURACIÓN PEDAGÓGICA =====
  /// Nivel de dificultad
  nivel_dificultad NivelDificultad

  /// Tiempo estimado en minutos
  tiempo_estimado_minutos Int

  /// Puntos de gamificación que se pueden obtener
  puntos_gamificacion Int

  // ===== INSTRUCCIONES =====
  /// Instrucciones para el docente
  instrucciones_docente String

  /// Instrucciones para el estudiante
  instrucciones_estudiante String

  // ===== RECURSOS ADICIONALES =====
  /// URLs de recursos (PDFs, videos, links)
  recursos_url Json? // [{ "tipo": "pdf", "titulo": "Guía", "url": "..." }]

  /// Orden dentro de la planificación (para futuras expansiones)
  orden Int @default(1)

  // ===== RELACIONES =====
  planificacion PlanificacionMensual @relation(fields: [planificacion_id], references: [id], onDelete: Cascade)

  /// Asignaciones de esta actividad específica
  asignacionesActividad AsignacionActividadEstudiante[]

  /// Progreso de estudiantes en esta actividad
  progresosEstudiantes ProgresoEstudianteActividad[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([planificacion_id, semana_numero])
  @@map("actividades_semanales")
}

/// Asignación de una planificación completa por un docente a su grupo
/// El docente "activa" la planificación del mes para su grupo
model AsignacionDocente {
  /// Identificador único
  id String @id @default(cuid())

  /// Planificación que se asigna
  planificacion_id String

  /// Grupo al que se asigna
  clase_grupo_id String

  /// Docente que hace la asignación
  docente_id String

  // ===== CONTROL DEL DOCENTE =====
  /// Si está activa o pausada
  activo Boolean @default(true)

  /// Fecha en que el docente activó esta planificación
  fecha_asignacion DateTime @default(now())

  /// Mensaje personalizado del docente (opcional)
  mensaje_docente String?

  /// Fecha de inicio custom (por si el docente quiere empezar antes/después)
  fecha_inicio_custom DateTime?

  // ===== RELACIONES =====
  planificacion PlanificacionMensual @relation(fields: [planificacion_id], references: [id])
  claseGrupo    ClaseGrupo           @relation(fields: [clase_grupo_id], references: [id])
  docente       Docente              @relation(fields: [docente_id], references: [id])

  /// Asignaciones de actividades individuales
  asignacionesActividades AsignacionActividadEstudiante[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  /// Un docente solo puede asignar una planificación una vez a su grupo
  @@unique([planificacion_id, clase_grupo_id])
  @@index([clase_grupo_id, docente_id])
  @@map("asignaciones_docente")
}

/// Asignación de una actividad semanal específica a estudiantes
/// El docente controla CUÁNDO y A QUIÉNES asigna cada semana
model AsignacionActividadEstudiante {
  /// Identificador único
  id String @id @default(cuid())

  /// Asignación padre (de la planificación completa)
  asignacion_docente_id String

  /// Actividad semanal específica
  actividad_id String

  /// Grupo al que se asigna (heredado de asignacion_docente)
  clase_grupo_id String

  // ===== CONTROL TEMPORAL =====
  /// Fecha en que se hace visible para los estudiantes
  fecha_inicio DateTime

  /// Fecha límite para completar (opcional)
  fecha_fin DateTime?

  /// Estado de la asignación
  estado EstadoAsignacion @default(ACTIVA)

  // ===== PERSONALIZACIÓN =====
  /// Mensaje personalizado del docente para esta semana
  mensaje_semana String?

  // ===== NOTIFICACIONES =====
  /// Si se notificó a estudiantes
  notificado_estudiantes         Boolean   @default(false)
  fecha_notificacion_estudiantes DateTime?

  /// Si se notificó a tutores
  notificado_tutores         Boolean   @default(false)
  fecha_notificacion_tutores DateTime?

  // ===== RELACIONES =====
  asignacionDocente AsignacionDocente @relation(fields: [asignacion_docente_id], references: [id], onDelete: Cascade)
  actividad         ActividadSemanal  @relation(fields: [actividad_id], references: [id])
  claseGrupo        ClaseGrupo        @relation(fields: [clase_grupo_id], references: [id])

  /// Progreso de cada estudiante
  progresosEstudiantes ProgresoEstudianteActividad[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([clase_grupo_id, fecha_inicio])
  @@index([asignacion_docente_id])
  @@map("asignaciones_actividad_estudiante")
}

/// Estados de una asignación
enum EstadoAsignacion {
  ACTIVA // Disponible para los estudiantes
  PAUSADA // Docente la pausó temporalmente
  FINALIZADA // Ya pasó la fecha límite
  CANCELADA // Docente la canceló

  @@map("estado_asignacion")
}

/// Progreso individual de cada estudiante en cada actividad
model ProgresoEstudianteActividad {
  /// Identificador único
  id String @id @default(cuid())

  /// Estudiante
  estudiante_id String

  /// Actividad semanal
  actividad_id String

  /// Asignación específica (para saber de qué grupo viene)
  asignacion_id String

  // ===== ESTADO DE PROGRESO =====
  /// Si el estudiante inició la actividad
  iniciado     Boolean   @default(false)
  fecha_inicio DateTime?

  /// Si completó la actividad
  completado       Boolean   @default(false)
  fecha_completado DateTime?

  // ===== MÉTRICAS =====
  /// Puntos obtenidos
  puntos_obtenidos Int @default(0)

  /// Tiempo total jugando (en minutos)
  tiempo_total_minutos Int @default(0)

  /// Cantidad de intentos
  intentos Int @default(0)

  /// Mejor puntaje obtenido
  mejor_puntaje Int @default(0)

  // ===== ESTADO DEL JUEGO =====
  /// Estado actual del juego (para poder continuar después)
  /// Estructura flexible según el juego
  estado_juego Json? // { "nivel": 5, "vidas": 2, "items_desbloqueados": [...] }

  /// Respuestas detalladas (para análisis del docente)
  respuestas_detalle Json? // [{ "pregunta": 1, "correcta": true, "tiempo_segundos": 5 }]

  // ===== RELACIONES =====
  estudiante Estudiante                    @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)
  actividad  ActividadSemanal              @relation(fields: [actividad_id], references: [id])
  asignacion AsignacionActividadEstudiante @relation(fields: [asignacion_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  /// Un estudiante solo tiene un progreso por actividad por asignación
  @@unique([estudiante_id, actividad_id, asignacion_id])
  @@index([estudiante_id])
  @@index([actividad_id])
  @@index([asignacion_id])
  @@map("progreso_estudiante_actividad")
}

// ============================================================================
// SISTEMA DE PLANIFICACIONES SIMPLIFICADO (Convention over Configuration)
// ============================================================================
//
// FILOSOFÍA:
// - Una planificación = UN archivo React con PLANIFICACION_CONFIG exportado
// - El sistema auto-detecta en build time
// - Solo guardamos lo mínimo: código, título, grupo, estado
// - Las semanas son solo números (1-4 o 1-12)
// - La docente controla qué semana está activa
// - El estudiante ve solo las semanas activas
//
// FLUJO:
// 1. Programás: /planificaciones/2025-03-multiplicaciones-b1.tsx
// 2. Build detecta el PLANIFICACION_CONFIG
// 3. Se registra automáticamente en BD
// 4. Admin asigna a docente
// 5. Docente activa semanas
// 6. Estudiante accede y juega
// ============================================================================

/// Catálogo de planificaciones (auto-detectadas desde código React)
model PlanificacionSimple {
  /// ID único
  id String @id @default(cuid())

  /// Código único (debe coincidir con el nombre del archivo)
  /// Ej: "2025-03-multiplicaciones-b1"
  codigo String @unique

  /// Título descriptivo
  titulo String

  /// Grupo específico (B1, B2, B3, A1, etc.)
  grupo_codigo String

  /// Mes (1-12, null para cursos anuales)
  mes Int?

  /// Año
  anio Int

  /// Total de semanas (4 para mensuales, 8-12 para cursos)
  semanas_total Int

  /// Ruta del archivo React
  /// Ej: "planificaciones/2025-03-multiplicaciones-b1.tsx"
  archivo_path String

  /// Estado
  estado EstadoPlanificacionSimple @default(DETECTADA)

  /// Auto-detectado en build time
  auto_detectada       Boolean  @default(true)
  fecha_deteccion      DateTime @default(now())
  ultima_actualizacion DateTime @updatedAt

  /// Relaciones
  asignaciones         AsignacionPlanificacion[]
  progresosEstudiantes ProgresoEstudiantePlanificacion[]

  @@index([codigo])
  @@index([grupo_codigo])
  @@index([estado])
  @@map("planificaciones_simples")
}

/// Estados simples de una planificación
enum EstadoPlanificacionSimple {
  DETECTADA // Auto-detectada, no asignada aún
  ASIGNADA // Asignada a al menos una docente
  ARCHIVADA // Desactivada

  @@map("estado_planificacion_simple")
}

/// Asignación de planificación a docente y grupo
model AsignacionPlanificacion {
  /// ID único
  id String @id @default(cuid())

  /// Planificación asignada
  planificacion_id String

  /// Docente responsable
  docente_id String

  /// Grupo específico (comisión)
  clase_grupo_id String

  /// Fecha de asignación
  fecha_asignacion DateTime @default(now())

  /// Activa o no
  activa Boolean @default(true)

  /// Relaciones
  planificacion PlanificacionSimple @relation(fields: [planificacion_id], references: [id], onDelete: Cascade)
  docente       Docente             @relation(fields: [docente_id], references: [id])
  claseGrupo    ClaseGrupo          @relation(fields: [clase_grupo_id], references: [id])

  /// Control de semanas
  semanas_activas SemanaActiva[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([planificacion_id, clase_grupo_id])
  @@index([docente_id])
  @@map("asignaciones_planificacion")
}

/// Control de qué semanas están activas
model SemanaActiva {
  /// ID único
  id String @id @default(cuid())

  /// Asignación padre
  asignacion_id String

  /// Número de semana (1-12)
  numero_semana Int

  /// Activa para estudiantes
  activa Boolean @default(false)

  /// Fecha de activación
  fecha_activacion DateTime?

  /// Relación
  asignacion AsignacionPlanificacion @relation(fields: [asignacion_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([asignacion_id, numero_semana])
  @@index([asignacion_id])
  @@index([activa])
  @@map("semanas_activas")
}

/// Progreso de estudiante en una planificación (global)
model ProgresoEstudiantePlanificacion {
  /// ID único
  id String @id @default(cuid())

  /// Estudiante
  estudiante_id String

  /// Planificación
  planificacion_id String

  /// Semana actual (1-12)
  semana_actual Int @default(1)

  /// Última actividad
  ultima_actividad DateTime @default(now())

  /// Estado guardado (JSON flexible)
  /// Tu componente React guarda lo que necesite aquí
  estado_guardado Json?

  /// Métricas globales
  tiempo_total_minutos Int @default(0)
  puntos_totales       Int @default(0)

  /// Relaciones
  estudiante    Estudiante          @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)
  planificacion PlanificacionSimple @relation(fields: [planificacion_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([estudiante_id, planificacion_id])
  @@index([estudiante_id])
  @@map("progreso_estudiante_planificacion")
}

// ============================================================================
// SISTEMA DE TIENDA Y RECURSOS (XP, MONEDAS, GEMAS)
// ============================================================================

/// Recursos del estudiante (XP, Monedas, Gemas)
/// Tabla que centraliza todos los recursos obtenibles por el estudiante
model RecursosEstudiante {
  /// Identificador único
  id String @id @default(cuid())

  /// ID del estudiante
  estudiante_id String @unique

  /// XP total acumulado (Experience Points)
  /// Se usa para niveles, desafíos, progresión
  xp_total Int @default(0)

  /// Monedas totales (moneda principal para compras en tienda)
  /// Se obtienen completando actividades, desafíos, asistencias
  monedas_total Int @default(0)

  /// Gemas (moneda premium/especial)
  /// Se obtienen con logros especiales, rachas largas, eventos
  gemas_total Int @default(0)

  /// Última actualización de recursos
  ultima_actualizacion DateTime @updatedAt

  /// Timestamp de creación
  createdAt DateTime @default(now())

  /// Timestamp de última actualización
  updatedAt DateTime @updatedAt

  /// Relaciones
  estudiante     Estudiante           @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)
  transacciones  TransaccionRecurso[]
  compras        CompraItem[]

  @@index([estudiante_id])
  @@map("recursos_estudiante")
}

/// Transacciones de recursos (historial de cambios)
/// Tabla transaccional que registra cada cambio en XP/Monedas/Gemas
model TransaccionRecurso {
  /// Identificador único
  id String @id @default(cuid())

  /// ID del recurso del estudiante
  recursos_estudiante_id String

  /// Tipo de recurso afectado
  tipo_recurso TipoRecurso

  /// Cantidad (positivo = ganancia, negativo = gasto)
  cantidad Int

  /// Razón de la transacción
  /// Ejemplos: "actividad_completada", "compra_tienda", "logro_desbloqueado", "racha_7_dias"
  razon String

  /// Metadata adicional (JSON flexible)
  /// Puede contener: actividad_id, item_id, logro_id, etc.
  metadata Json?

  /// Fecha de la transacción
  fecha DateTime @default(now())

  /// Timestamp de creación
  createdAt DateTime @default(now())

  /// Relaciones
  recursosEstudiante RecursosEstudiante @relation(fields: [recursos_estudiante_id], references: [id], onDelete: Cascade)

  @@index([recursos_estudiante_id])
  @@index([tipo_recurso])
  @@index([fecha])
  @@map("transacciones_recurso")
}

/// Categorías de items de la tienda
/// Organiza los items en secciones (Avatares, Skins, Power-ups, etc.)
model CategoriaItem {
  /// Identificador único
  id String @id @default(cuid())

  /// Nombre de la categoría
  /// Ejemplos: "Avatares", "Skins", "Power-ups", "Efectos"
  nombre String @unique

  /// Descripción de la categoría
  descripcion String?

  /// Icono/emoji de la categoría
  icono String

  /// Orden de visualización
  orden Int @default(0)

  /// Si está activa y visible en tienda
  activa Boolean @default(true)

  /// Timestamp de creación
  createdAt DateTime @default(now())

  /// Timestamp de última actualización
  updatedAt DateTime @updatedAt

  /// Relaciones
  items ItemTienda[]

  @@map("categorias_item")
}

/// Items disponibles en la tienda
/// Define cada item comprable (avatares, skins, power-ups, cosméticos)
model ItemTienda {
  /// Identificador único
  id String @id @default(cuid())

  /// Nombre del item
  nombre String

  /// Descripción del item
  descripcion String?

  /// ID de la categoría
  categoria_id String

  /// Tipo de item (avatar, skin, powerup, cosmetico, etc.)
  tipo_item TipoItem

  /// Precio en monedas (0 si se compra solo con gemas)
  precio_monedas Int @default(0)

  /// Precio en gemas (0 si se compra solo con monedas)
  precio_gemas Int @default(0)

  /// URL de la imagen/preview del item
  imagen_url String?

  /// Rareza del item (común, raro, épico, legendario)
  rareza RarezaItem @default(COMUN)

  /// Si es un item de edición limitada
  edicion_limitada Boolean @default(false)

  /// Fecha de inicio de disponibilidad (null = siempre disponible)
  fecha_inicio DateTime?

  /// Fecha de fin de disponibilidad (null = sin fecha límite)
  fecha_fin DateTime?

  /// Nivel mínimo requerido para comprar
  nivel_minimo_requerido Int @default(1)

  /// Si está disponible en la tienda
  disponible Boolean @default(true)

  /// Cantidad de veces que se ha comprado (para estadísticas)
  veces_comprado Int @default(0)

  /// Metadata adicional del item (JSON flexible)
  /// Puede contener: stats, efectos, duración, etc.
  metadata Json?

  /// Timestamp de creación
  createdAt DateTime @default(now())

  /// Timestamp de última actualización
  updatedAt DateTime @updatedAt

  /// Relaciones
  categoria CategoriaItem      @relation(fields: [categoria_id], references: [id])
  compras   CompraItem[]
  itemsObtenidos ItemObtenido[]

  @@index([categoria_id])
  @@index([tipo_item])
  @@index([rareza])
  @@index([disponible])
  @@map("items_tienda")
}

/// Items obtenidos por el estudiante (inventario)
/// Registra qué items posee cada estudiante
model ItemObtenido {
  /// Identificador único
  id String @id @default(cuid())

  /// ID del estudiante
  estudiante_id String

  /// ID del item
  item_id String

  /// Fecha de obtención
  fecha_obtencion DateTime @default(now())

  /// Si el item está equipado/activo actualmente
  equipado Boolean @default(false)

  /// Cantidad (para items consumibles/stackeables)
  cantidad Int @default(1)

  /// Metadata adicional (JSON flexible)
  /// Puede contener: usos_restantes, fecha_expiracion, etc.
  metadata Json?

  /// Timestamp de creación
  createdAt DateTime @default(now())

  /// Timestamp de última actualización
  updatedAt DateTime @updatedAt

  /// Relaciones
  estudiante Estudiante  @relation(fields: [estudiante_id], references: [id], onDelete: Cascade)
  item       ItemTienda  @relation(fields: [item_id], references: [id])

  @@unique([estudiante_id, item_id])
  @@index([estudiante_id])
  @@index([item_id])
  @@index([equipado])
  @@map("items_obtenidos")
}

/// Compras realizadas en la tienda (historial transaccional)
/// Registra cada compra de item por estudiante
model CompraItem {
  /// Identificador único
  id String @id @default(cuid())

  /// ID del recurso del estudiante (para tracking de recursos)
  recursos_estudiante_id String

  /// ID del item comprado
  item_id String

  /// Precio pagado en monedas
  monedas_gastadas Int @default(0)

  /// Precio pagado en gemas
  gemas_gastadas Int @default(0)

  /// Fecha de la compra
  fecha_compra DateTime @default(now())

  /// Timestamp de creación
  createdAt DateTime @default(now())

  /// Relaciones
  recursosEstudiante RecursosEstudiante @relation(fields: [recursos_estudiante_id], references: [id], onDelete: Cascade)
  item               ItemTienda         @relation(fields: [item_id], references: [id])

  @@index([recursos_estudiante_id])
  @@index([item_id])
  @@index([fecha_compra])
  @@map("compras_item")
}

// ============================================================================
// ENUMS PARA TIENDA Y RECURSOS
// ============================================================================

/// Tipos de recursos del estudiante
enum TipoRecurso {
  XP
  MONEDAS
  GEMAS

  @@map("tipo_recurso")
}

/// Tipos de items de la tienda
enum TipoItem {
  AVATAR          // Avatar 3D completo
  SKIN            // Skin/outfit para avatar
  ACCESORIO       // Accesorios (sombreros, gafas, etc.)
  POWERUP         // Power-ups temporales (2x XP, etc.)
  COSMETICO       // Efectos cosméticos (partículas, auras, etc.)
  TITULO          // Títulos/badges personalizados
  EMOJI           // Emojis/stickers personalizados
  FONDO           // Fondos de perfil
  MARCO           // Marcos de avatar

  @@map("tipo_item")
}

/// Rareza de items
enum RarezaItem {
  COMUN
  RARO
  EPICO
  LEGENDARIO

  @@map("rareza_item")
}
