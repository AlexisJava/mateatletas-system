/**
 * SEED DE DATOS REALES DE MATEATLETAS
 * Poblamos la base de datos con informaci√≥n real del club
 */

import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

// Password por defecto para todos los usuarios de prueba
const DEFAULT_PASSWORD = 'Mateatletas2024!';

async function main() {
  console.log('üöÄ Iniciando seed de datos reales de Mateatletas...\n');

  // ============================================
  // 1. LIMPIAR DATOS EXISTENTES (opcional)
  // ============================================
  console.log('üßπ Limpiando datos existentes...');

  await prisma.asistencia.deleteMany();
  await prisma.inscripcionClase.deleteMany();
  await prisma.clase.deleteMany();
  await prisma.nota.deleteMany();
  await prisma.recordatorio.deleteMany();
  await prisma.tarea.deleteMany();
  await prisma.evento.deleteMany();
  await prisma.inscripcionCurso.deleteMany();
  await prisma.membresia.deleteMany();
  await prisma.pago.deleteMany();
  await prisma.logro.deleteMany();
  await prisma.registroExperiencia.deleteMany();
  await prisma.perfilGamificacion.deleteMany();
  await prisma.estudiante.deleteMany();
  await prisma.docente.deleteMany();
  await prisma.user.deleteMany({ where: { role: { not: 'admin' } } });

  console.log('‚úÖ Datos limpiados\n');

  // ============================================
  // 2. CREAR DOCENTES
  // ============================================
  console.log('üë©‚Äçüè´ Creando docentes...');

  const hashedPassword = await bcrypt.hash(DEFAULT_PASSWORD, 10);

  const gimena = await prisma.user.create({
    data: {
      email: 'gime.reniero@mateatletas.com',
      password: hashedPassword,
      nombre: 'Gimena',
      apellido: 'Reniero',
      role: 'docente',
      docente: {
        create: {
          titulo: 'Profesora en Matem√°tica',
          bio: 'Especialista en trabajo con ni√±os y experta en Matific',
        }
      }
    },
    include: { docente: true }
  });
  console.log(`  ‚úì Gimena Reniero (${gimena.email})`);

  const ayelen = await prisma.user.create({
    data: {
      email: 'ayelen.yanez@mateatletas.com',
      password: hashedPassword,
      nombre: 'Ayelen',
      apellido: 'Ya√±ez',
      role: 'docente',
      docente: {
        create: {
          titulo: 'Licenciada en Psicopedagog√≠a',
          bio: 'Especialista en habilidades y dificultades del aprendizaje de matem√°ticas. Diplomada en dificultades y habilidades matem√°ticas',
        }
      }
    },
    include: { docente: true }
  });
  console.log(`  ‚úì Ayelen Ya√±ez (${ayelen.email})\n`);

  // ============================================
  // 3. CREAR TUTORES/PADRES
  // ============================================
  console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Creando tutores/padres...');

  const laura = await prisma.user.create({
    data: {
      email: 'laura.hermoso@test.com',
      password: hashedPassword,
      nombre: 'Laura',
      apellido: 'Hermoso',
      role: 'tutor',
    }
  });
  console.log(`  ‚úì Laura Hermoso (${laura.email})`);

  const adriana = await prisma.user.create({
    data: {
      email: 'adriana.lui@test.com',
      password: hashedPassword,
      nombre: 'Adriana',
      apellido: 'Lui',
      role: 'tutor',
    }
  });
  console.log(`  ‚úì Adriana Lui (${adriana.email})\n`);

  // ============================================
  // 4. CREAR ESTUDIANTES
  // ============================================
  console.log('üë∂ Creando estudiantes...');

  // Estudiantes de Laura Hermoso
  const dante = await prisma.estudiante.create({
    data: {
      nombre: 'Dante',
      apellido: 'Migani',
      email: 'dante.migani@estudiante.com',
      fecha_nacimiento: new Date('2019-05-10'),
      tutor_id: laura.id,
      perfilGamificacion: {
        create: {
          nivel: 1,
          experiencia_total: 0,
          experiencia_nivel_actual: 0,
        }
      }
    }
  });
  console.log(`  ‚úì Dante Migani (2do grado, tutor: Laura Hermoso)`);

  // Estudiantes de Adriana Lui
  const nicolas = await prisma.estudiante.create({
    data: {
      nombre: 'Nicolas',
      apellido: 'Schenone',
      email: 'nicolas.schenone@estudiante.com',
      fecha_nacimiento: new Date('2019-10-15'),
      tutor_id: adriana.id,
      perfilGamificacion: {
        create: {
          nivel: 1,
          experiencia_total: 0,
          experiencia_nivel_actual: 0,
        }
      }
    }
  });
  console.log(`  ‚úì Nicolas Schenone (3ro grado, tutor: Adriana Lui)`);

  const isabella = await prisma.estudiante.create({
    data: {
      nombre: 'Isabella',
      apellido: 'Schenone',
      email: 'isabella.schenone@estudiante.com',
      fecha_nacimiento: new Date('2020-05-10'),
      tutor_id: adriana.id,
      perfilGamificacion: {
        create: {
          nivel: 1,
          experiencia_total: 0,
          experiencia_nivel_actual: 0,
        }
      }
    }
  });
  console.log(`  ‚úì Isabella Schenone (2do grado, tutor: Adriana Lui)`);

  const giuliana = await prisma.estudiante.create({
    data: {
      nombre: 'Giuliana',
      apellido: 'Schenone',
      email: 'giuliana.schenone@estudiante.com',
      fecha_nacimiento: new Date('2017-10-01'),
      tutor_id: adriana.id,
      perfilGamificacion: {
        create: {
          nivel: 1,
          experiencia_total: 0,
          experiencia_nivel_actual: 0,
        }
      }
    }
  });
  console.log(`  ‚úì Giuliana Schenone (4to grado, tutor: Adriana Lui)`);

  const theo = await prisma.estudiante.create({
    data: {
      nombre: 'Theo',
      apellido: 'Ghesla',
      email: 'theo.ghesla@estudiante.com',
      fecha_nacimiento: new Date('2019-07-18'),
      tutor_id: adriana.id,
      perfilGamificacion: {
        create: {
          nivel: 1,
          experiencia_total: 0,
          experiencia_nivel_actual: 0,
        }
      }
    }
  });
  console.log(`  ‚úì Theo Ghesla (3ro grado, tutor: Adriana Lui)\n`);

  // ============================================
  // 5. CREAR PRODUCTOS (SUSCRIPCIONES Y CURSOS)
  // ============================================
  console.log('üí≥ Creando productos del cat√°logo...');

  const planPresencial = await prisma.producto.create({
    data: {
      nombre: 'Matem√°ticas Anuales Presenciales',
      descripcion: 'Aprendizaje matem√°tico l√∫dico en escuela primaria - Modalidad Presencial',
      tipo: 'SUSCRIPCION',
      precio: 60000,
      activo: true,
      duracion_meses: 12,
    }
  });
  console.log(`  ‚úì ${planPresencial.nombre} - $${planPresencial.precio}`);

  const planVirtual = await prisma.producto.create({
    data: {
      nombre: 'Matem√°ticas Anuales Virtuales',
      descripcion: 'Aprendizaje matem√°tico l√∫dico en escuela primaria - Modalidad Virtual',
      tipo: 'SUSCRIPCION',
      precio: 50000,
      activo: true,
      duracion_meses: 12,
    }
  });
  console.log(`  ‚úì ${planVirtual.nombre} - $${planVirtual.precio}`);

  const cursoExploradores = await prisma.producto.create({
    data: {
      nombre: 'Exploradores Matem√°ticos',
      descripcion: 'Matem√°ticas iniciales para primaria. Duraci√≥n: 9 meses',
      tipo: 'CURSO',
      precio: 60000,
      activo: true,
    }
  });
  console.log(`  ‚úì ${cursoExploradores.nombre} - $${cursoExploradores.precio}`);

  const cursoIniciales = await prisma.producto.create({
    data: {
      nombre: 'Matem√°ticas Iniciales',
      descripcion: 'Matem√°ticas iniciales para primaria de forma l√∫dica. Duraci√≥n: 9 meses',
      tipo: 'CURSO',
      precio: 50000,
      activo: true,
    }
  });
  console.log(`  ‚úì ${cursoIniciales.nombre} - $${cursoIniciales.precio}\n`);

  // ============================================
  // 6. CREAR MEMBRES√çAS ACTIVAS
  // ============================================
  console.log('üéüÔ∏è Creando membres√≠as activas...');

  // Laura Hermoso - Plan Virtual
  const membresiaLaura = await prisma.membresia.create({
    data: {
      usuario_id: laura.id,
      producto_id: planVirtual.id,
      fecha_inicio: new Date('2025-01-01'),
      fecha_fin: new Date('2025-12-31'),
      estado: 'activa',
    }
  });
  console.log(`  ‚úì Laura Hermoso - Plan Virtual (activa)`);

  // Adriana Lui - Plan Presencial
  const membresiaAdriana = await prisma.membresia.create({
    data: {
      usuario_id: adriana.id,
      producto_id: planPresencial.id,
      fecha_inicio: new Date('2025-01-01'),
      fecha_fin: new Date('2025-12-31'),
      estado: 'activa',
    }
  });
  console.log(`  ‚úì Adriana Lui - Plan Presencial (activa)\n`);

  // ============================================
  // 7. INSCRIPCIONES A CURSOS
  // ============================================
  console.log('üìö Creando inscripciones a cursos...');

  // Dante -> Matem√°ticas Iniciales con Gimena
  await prisma.inscripcionCurso.create({
    data: {
      estudiante_id: dante.id,
      producto_id: cursoIniciales.id,
      fecha_inscripcion: new Date('2025-01-15'),
      estado: 'activa',
    }
  });
  console.log(`  ‚úì Dante Migani inscrito en Matem√°ticas Iniciales`);

  // Nicolas -> Exploradores Matem√°ticos con Ayelen
  await prisma.inscripcionCurso.create({
    data: {
      estudiante_id: nicolas.id,
      producto_id: cursoExploradores.id,
      fecha_inscripcion: new Date('2025-01-15'),
      estado: 'activa',
    }
  });
  console.log(`  ‚úì Nicolas Schenone inscrito en Exploradores Matem√°ticos`);

  // Isabella -> Exploradores Matem√°ticos con Ayelen
  await prisma.inscripcionCurso.create({
    data: {
      estudiante_id: isabella.id,
      producto_id: cursoExploradores.id,
      fecha_inscripcion: new Date('2025-01-15'),
      estado: 'activa',
    }
  });
  console.log(`  ‚úì Isabella Schenone inscrita en Exploradores Matem√°ticos`);

  // Giuliana -> Exploradores Matem√°ticos con Ayelen
  await prisma.inscripcionCurso.create({
    data: {
      estudiante_id: giuliana.id,
      producto_id: cursoExploradores.id,
      fecha_inscripcion: new Date('2025-01-15'),
      estado: 'activa',
    }
  });
  console.log(`  ‚úì Giuliana Schenone inscrita en Exploradores Matem√°ticos`);

  // Theo -> Exploradores Matem√°ticos con Ayelen
  await prisma.inscripcionCurso.create({
    data: {
      estudiante_id: theo.id,
      producto_id: cursoExploradores.id,
      fecha_inscripcion: new Date('2025-01-15'),
      estado: 'activa',
    }
  });
  console.log(`  ‚úì Theo Ghesla inscrito en Exploradores Matem√°ticos\n`);

  // ============================================
  // 8. CREAR ALGUNAS CLASES PROGRAMADAS
  // ============================================
  console.log('üìÖ Creando clases programadas...');

  // Obtener rutas curriculares existentes
  const rutas = await prisma.rutaCurricular.findMany();
  const rutaAritmetica = rutas.find(r => r.nombre === 'Aritm√©tica');

  if (rutaAritmetica) {
    // Clase con Gimena - Matem√°ticas Iniciales
    const claseGimena1 = await prisma.clase.create({
      data: {
        titulo: 'Suma y Resta - Introducci√≥n',
        descripcion: 'Introducci√≥n a la suma y resta para 2do grado',
        ruta_curricular_id: rutaAritmetica.id,
        docente_id: gimena.docente!.id,
        fecha_inicio: new Date('2025-10-18T15:00:00'),
        fecha_fin: new Date('2025-10-18T16:00:00'),
        cupo_maximo: 6,
        cupos_disponibles: 5,
        estado: 'Programada',
        modalidad: 'VIRTUAL',
      }
    });
    console.log(`  ‚úì Clase: ${claseGimena1.titulo} con Gimena Reniero`);

    // Inscribir a Dante
    await prisma.inscripcionClase.create({
      data: {
        clase_id: claseGimena1.id,
        estudiante_id: dante.id,
      }
    });

    // Clase con Ayelen - Exploradores Matem√°ticos
    const claseAyelen1 = await prisma.clase.create({
      data: {
        titulo: 'N√∫meros y Operaciones - Nivel 3ro',
        descripcion: 'Trabajo con n√∫meros naturales y operaciones b√°sicas',
        ruta_curricular_id: rutaAritmetica.id,
        docente_id: ayelen.docente!.id,
        fecha_inicio: new Date('2025-10-19T16:00:00'),
        fecha_fin: new Date('2025-10-19T17:00:00'),
        cupo_maximo: 10,
        cupos_disponibles: 6,
        estado: 'Programada',
        modalidad: 'PRESENCIAL',
      }
    });
    console.log(`  ‚úì Clase: ${claseAyelen1.titulo} con Ayelen Ya√±ez`);

    // Inscribir a los estudiantes de Exploradores
    await prisma.inscripcionClase.createMany({
      data: [
        { clase_id: claseAyelen1.id, estudiante_id: nicolas.id },
        { clase_id: claseAyelen1.id, estudiante_id: isabella.id },
        { clase_id: claseAyelen1.id, estudiante_id: giuliana.id },
        { clase_id: claseAyelen1.id, estudiante_id: theo.id },
      ]
    });
  }

  console.log('\n');

  // ============================================
  // 9. CREAR ALGUNOS PAGOS DE EJEMPLO
  // ============================================
  console.log('üí∞ Creando pagos de ejemplo...');

  await prisma.pago.create({
    data: {
      usuario_id: laura.id,
      producto_id: planVirtual.id,
      monto: 50000,
      estado: 'aprobado',
      metodo_pago: 'mercadopago',
      fecha_pago: new Date('2025-01-01'),
    }
  });
  console.log(`  ‚úì Pago de Laura Hermoso - Plan Virtual ($50,000)`);

  await prisma.pago.create({
    data: {
      usuario_id: adriana.id,
      producto_id: planPresencial.id,
      monto: 60000,
      estado: 'aprobado',
      metodo_pago: 'mercadopago',
      fecha_pago: new Date('2025-01-01'),
    }
  });
  console.log(`  ‚úì Pago de Adriana Lui - Plan Presencial ($60,000)\n`);

  // ============================================
  // RESUMEN FINAL
  // ============================================
  console.log('‚úÖ SEED COMPLETADO EXITOSAMENTE\n');
  console.log('üìä RESUMEN:');
  console.log('  ‚Ä¢ 2 Docentes creados');
  console.log('  ‚Ä¢ 2 Tutores/Padres creados');
  console.log('  ‚Ä¢ 5 Estudiantes creados');
  console.log('  ‚Ä¢ 4 Productos creados (2 suscripciones + 2 cursos)');
  console.log('  ‚Ä¢ 2 Membres√≠as activas');
  console.log('  ‚Ä¢ 5 Inscripciones a cursos');
  console.log('  ‚Ä¢ 2 Clases programadas');
  console.log('  ‚Ä¢ 2 Pagos registrados');
  console.log('\nüîë CREDENCIALES DE ACCESO:');
  console.log('  Password para todos: Mateatletas2024!');
  console.log('\n  DOCENTES:');
  console.log('    ‚Ä¢ gime.reniero@mateatletas.com');
  console.log('    ‚Ä¢ ayelen.yanez@mateatletas.com');
  console.log('\n  TUTORES:');
  console.log('    ‚Ä¢ laura.hermoso@test.com');
  console.log('    ‚Ä¢ adriana.lui@test.com');
  console.log('\n');
}

main()
  .catch((e) => {
    console.error('‚ùå Error en el seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
